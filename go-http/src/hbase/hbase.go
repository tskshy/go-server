// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

//Specify type of delete:
// - DELETE_COLUMN means exactly one version will be removed,
// - DELETE_COLUMNS means previous versions will also be removed.
type TDeleteType int64
const (
  TDeleteType_DELETE_COLUMN TDeleteType = 0
  TDeleteType_DELETE_COLUMNS TDeleteType = 1
  TDeleteType_DELETE_FAMILY TDeleteType = 2
  TDeleteType_DELETE_FAMILY_VERSION TDeleteType = 3
)

func (p TDeleteType) String() string {
  switch p {
  case TDeleteType_DELETE_COLUMN: return "DELETE_COLUMN"
  case TDeleteType_DELETE_COLUMNS: return "DELETE_COLUMNS"
  case TDeleteType_DELETE_FAMILY: return "DELETE_FAMILY"
  case TDeleteType_DELETE_FAMILY_VERSION: return "DELETE_FAMILY_VERSION"
  }
  return "<UNSET>"
}

func TDeleteTypeFromString(s string) (TDeleteType, error) {
  switch s {
  case "DELETE_COLUMN": return TDeleteType_DELETE_COLUMN, nil 
  case "DELETE_COLUMNS": return TDeleteType_DELETE_COLUMNS, nil 
  case "DELETE_FAMILY": return TDeleteType_DELETE_FAMILY, nil 
  case "DELETE_FAMILY_VERSION": return TDeleteType_DELETE_FAMILY_VERSION, nil 
  }
  return TDeleteType(0), fmt.Errorf("not a valid TDeleteType string")
}


func TDeleteTypePtr(v TDeleteType) *TDeleteType { return &v }

func (p TDeleteType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TDeleteType) UnmarshalText(text []byte) error {
q, err := TDeleteTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TDeleteType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TDeleteType(v)
return nil
}

func (p * TDeleteType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Specify Durability:
// - SKIP_WAL means do not write the Mutation to the WAL.
// - ASYNC_WAL means write the Mutation to the WAL asynchronously,
// - SYNC_WAL means write the Mutation to the WAL synchronously,
// - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
type TDurability int64
const (
  TDurability_SKIP_WAL TDurability = 1
  TDurability_ASYNC_WAL TDurability = 2
  TDurability_SYNC_WAL TDurability = 3
  TDurability_FSYNC_WAL TDurability = 4
)

func (p TDurability) String() string {
  switch p {
  case TDurability_SKIP_WAL: return "SKIP_WAL"
  case TDurability_ASYNC_WAL: return "ASYNC_WAL"
  case TDurability_SYNC_WAL: return "SYNC_WAL"
  case TDurability_FSYNC_WAL: return "FSYNC_WAL"
  }
  return "<UNSET>"
}

func TDurabilityFromString(s string) (TDurability, error) {
  switch s {
  case "SKIP_WAL": return TDurability_SKIP_WAL, nil 
  case "ASYNC_WAL": return TDurability_ASYNC_WAL, nil 
  case "SYNC_WAL": return TDurability_SYNC_WAL, nil 
  case "FSYNC_WAL": return TDurability_FSYNC_WAL, nil 
  }
  return TDurability(0), fmt.Errorf("not a valid TDurability string")
}


func TDurabilityPtr(v TDurability) *TDurability { return &v }

func (p TDurability) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TDurability) UnmarshalText(text []byte) error {
q, err := TDurabilityFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TDurability) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TDurability(v)
return nil
}

func (p * TDurability) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TReadType int64
const (
  TReadType_DEFAULT TReadType = 1
  TReadType_STREAM TReadType = 2
  TReadType_PREAD TReadType = 3
)

func (p TReadType) String() string {
  switch p {
  case TReadType_DEFAULT: return "DEFAULT"
  case TReadType_STREAM: return "STREAM"
  case TReadType_PREAD: return "PREAD"
  }
  return "<UNSET>"
}

func TReadTypeFromString(s string) (TReadType, error) {
  switch s {
  case "DEFAULT": return TReadType_DEFAULT, nil 
  case "STREAM": return TReadType_STREAM, nil 
  case "PREAD": return TReadType_PREAD, nil 
  }
  return TReadType(0), fmt.Errorf("not a valid TReadType string")
}


func TReadTypePtr(v TReadType) *TReadType { return &v }

func (p TReadType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TReadType) UnmarshalText(text []byte) error {
q, err := TReadTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TReadType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TReadType(v)
return nil
}

func (p * TReadType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
//Thrift wrapper around
//org.apache.hadoop.hbase.filter.CompareFilter$CompareOp.
type TCompareOp int64
const (
  TCompareOp_LESS TCompareOp = 0
  TCompareOp_LESS_OR_EQUAL TCompareOp = 1
  TCompareOp_EQUAL TCompareOp = 2
  TCompareOp_NOT_EQUAL TCompareOp = 3
  TCompareOp_GREATER_OR_EQUAL TCompareOp = 4
  TCompareOp_GREATER TCompareOp = 5
  TCompareOp_NO_OP TCompareOp = 6
)

func (p TCompareOp) String() string {
  switch p {
  case TCompareOp_LESS: return "LESS"
  case TCompareOp_LESS_OR_EQUAL: return "LESS_OR_EQUAL"
  case TCompareOp_EQUAL: return "EQUAL"
  case TCompareOp_NOT_EQUAL: return "NOT_EQUAL"
  case TCompareOp_GREATER_OR_EQUAL: return "GREATER_OR_EQUAL"
  case TCompareOp_GREATER: return "GREATER"
  case TCompareOp_NO_OP: return "NO_OP"
  }
  return "<UNSET>"
}

func TCompareOpFromString(s string) (TCompareOp, error) {
  switch s {
  case "LESS": return TCompareOp_LESS, nil 
  case "LESS_OR_EQUAL": return TCompareOp_LESS_OR_EQUAL, nil 
  case "EQUAL": return TCompareOp_EQUAL, nil 
  case "NOT_EQUAL": return TCompareOp_NOT_EQUAL, nil 
  case "GREATER_OR_EQUAL": return TCompareOp_GREATER_OR_EQUAL, nil 
  case "GREATER": return TCompareOp_GREATER, nil 
  case "NO_OP": return TCompareOp_NO_OP, nil 
  }
  return TCompareOp(0), fmt.Errorf("not a valid TCompareOp string")
}


func TCompareOpPtr(v TCompareOp) *TCompareOp { return &v }

func (p TCompareOp) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TCompareOp) UnmarshalText(text []byte) error {
q, err := TCompareOpFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TCompareOp) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TCompareOp(v)
return nil
}

func (p * TCompareOp) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - MinStamp
//  - MaxStamp
type TTimeRange struct {
  MinStamp int64 `thrift:"minStamp,1,required" db:"minStamp" json:"minStamp"`
  MaxStamp int64 `thrift:"maxStamp,2,required" db:"maxStamp" json:"maxStamp"`
}

func NewTTimeRange() *TTimeRange {
  return &TTimeRange{}
}


func (p *TTimeRange) GetMinStamp() int64 {
  return p.MinStamp
}

func (p *TTimeRange) GetMaxStamp() int64 {
  return p.MaxStamp
}
func (p *TTimeRange) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMinStamp bool = false;
  var issetMaxStamp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMinStamp = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMaxStamp = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMinStamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MinStamp is not set"));
  }
  if !issetMaxStamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MaxStamp is not set"));
  }
  return nil
}

func (p *TTimeRange)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MinStamp = v
}
  return nil
}

func (p *TTimeRange)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxStamp = v
}
  return nil
}

func (p *TTimeRange) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TTimeRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTimeRange) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minStamp", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minStamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.MinStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minStamp (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minStamp: ", p), err) }
  return err
}

func (p *TTimeRange) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxStamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxStamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxStamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxStamp: ", p), err) }
  return err
}

func (p *TTimeRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTimeRange(%+v)", *p)
}

// Addresses a single cell or multiple cells
// in a HBase table by column family and optionally
// a column qualifier and timestamp
// 
// Attributes:
//  - Family
//  - Qualifier
//  - Timestamp
type TColumn struct {
  Family []byte `thrift:"family,1,required" db:"family" json:"family"`
  Qualifier []byte `thrift:"qualifier,2" db:"qualifier" json:"qualifier,omitempty"`
  Timestamp *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
}

func NewTColumn() *TColumn {
  return &TColumn{}
}


func (p *TColumn) GetFamily() []byte {
  return p.Family
}
var TColumn_Qualifier_DEFAULT []byte

func (p *TColumn) GetQualifier() []byte {
  return p.Qualifier
}
var TColumn_Timestamp_DEFAULT int64
func (p *TColumn) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TColumn_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *TColumn) IsSetQualifier() bool {
  return p.Qualifier != nil
}

func (p *TColumn) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFamily bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFamily = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFamily{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Family is not set"));
  }
  return nil
}

func (p *TColumn)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *TColumn)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Qualifier = v
}
  return nil
}

func (p *TColumn)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumn"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:family: ", p), err) }
  if err := oprot.WriteBinary(p.Family); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:family: ", p), err) }
  return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetQualifier() {
    if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:qualifier: ", p), err) }
    if err := oprot.WriteBinary(p.Qualifier); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.qualifier (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:qualifier: ", p), err) }
  }
  return err
}

func (p *TColumn) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  }
  return err
}

func (p *TColumn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumn(%+v)", *p)
}

// Represents a single cell and its value.
// 
// Attributes:
//  - Family
//  - Qualifier
//  - Value
//  - Timestamp
//  - Tags
type TColumnValue struct {
  Family []byte `thrift:"family,1,required" db:"family" json:"family"`
  Qualifier []byte `thrift:"qualifier,2,required" db:"qualifier" json:"qualifier"`
  Value []byte `thrift:"value,3,required" db:"value" json:"value"`
  Timestamp *int64 `thrift:"timestamp,4" db:"timestamp" json:"timestamp,omitempty"`
  Tags []byte `thrift:"tags,5" db:"tags" json:"tags,omitempty"`
}

func NewTColumnValue() *TColumnValue {
  return &TColumnValue{}
}


func (p *TColumnValue) GetFamily() []byte {
  return p.Family
}

func (p *TColumnValue) GetQualifier() []byte {
  return p.Qualifier
}

func (p *TColumnValue) GetValue() []byte {
  return p.Value
}
var TColumnValue_Timestamp_DEFAULT int64
func (p *TColumnValue) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TColumnValue_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TColumnValue_Tags_DEFAULT []byte

func (p *TColumnValue) GetTags() []byte {
  return p.Tags
}
func (p *TColumnValue) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TColumnValue) IsSetTags() bool {
  return p.Tags != nil
}

func (p *TColumnValue) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFamily bool = false;
  var issetQualifier bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFamily = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetQualifier = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetValue = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFamily{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Family is not set"));
  }
  if !issetQualifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Qualifier is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *TColumnValue)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *TColumnValue)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Qualifier = v
}
  return nil
}

func (p *TColumnValue)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TColumnValue)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TColumnValue)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tags = v
}
  return nil
}

func (p *TColumnValue) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnValue) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:family: ", p), err) }
  if err := oprot.WriteBinary(p.Family); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:family: ", p), err) }
  return err
}

func (p *TColumnValue) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:qualifier: ", p), err) }
  if err := oprot.WriteBinary(p.Qualifier); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qualifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:qualifier: ", p), err) }
  return err
}

func (p *TColumnValue) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *TColumnValue) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err) }
  }
  return err
}

func (p *TColumnValue) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetTags() {
    if err := oprot.WriteFieldBegin("tags", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tags: ", p), err) }
    if err := oprot.WriteBinary(p.Tags); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tags (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tags: ", p), err) }
  }
  return err
}

func (p *TColumnValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnValue(%+v)", *p)
}

// Represents a single cell and the amount to increment it by
// 
// Attributes:
//  - Family
//  - Qualifier
//  - Amount
type TColumnIncrement struct {
  Family []byte `thrift:"family,1,required" db:"family" json:"family"`
  Qualifier []byte `thrift:"qualifier,2,required" db:"qualifier" json:"qualifier"`
  Amount int64 `thrift:"amount,3" db:"amount" json:"amount,omitempty"`
}

func NewTColumnIncrement() *TColumnIncrement {
  return &TColumnIncrement{
Amount: 1,
}
}


func (p *TColumnIncrement) GetFamily() []byte {
  return p.Family
}

func (p *TColumnIncrement) GetQualifier() []byte {
  return p.Qualifier
}
var TColumnIncrement_Amount_DEFAULT int64 = 1

func (p *TColumnIncrement) GetAmount() int64 {
  return p.Amount
}
func (p *TColumnIncrement) IsSetAmount() bool {
  return p.Amount != TColumnIncrement_Amount_DEFAULT
}

func (p *TColumnIncrement) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFamily bool = false;
  var issetQualifier bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFamily = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetQualifier = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFamily{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Family is not set"));
  }
  if !issetQualifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Qualifier is not set"));
  }
  return nil
}

func (p *TColumnIncrement)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *TColumnIncrement)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Qualifier = v
}
  return nil
}

func (p *TColumnIncrement)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TColumnIncrement) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TColumnIncrement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TColumnIncrement) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:family: ", p), err) }
  if err := oprot.WriteBinary(p.Family); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:family: ", p), err) }
  return err
}

func (p *TColumnIncrement) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:qualifier: ", p), err) }
  if err := oprot.WriteBinary(p.Qualifier); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qualifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:qualifier: ", p), err) }
  return err
}

func (p *TColumnIncrement) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAmount() {
    if err := oprot.WriteFieldBegin("amount", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:amount: ", p), err) }
    if err := oprot.WriteI64(int64(p.Amount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.amount (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:amount: ", p), err) }
  }
  return err
}

func (p *TColumnIncrement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TColumnIncrement(%+v)", *p)
}

// if no Result is found, row and columnValues will not be set.
// 
// Attributes:
//  - Row
//  - ColumnValues
type TResult_ struct {
  Row []byte `thrift:"row,1" db:"row" json:"row,omitempty"`
  ColumnValues []*TColumnValue `thrift:"columnValues,2,required" db:"columnValues" json:"columnValues"`
}

func NewTResult_() *TResult_ {
  return &TResult_{}
}

var TResult__Row_DEFAULT []byte

func (p *TResult_) GetRow() []byte {
  return p.Row
}

func (p *TResult_) GetColumnValues() []*TColumnValue {
  return p.ColumnValues
}
func (p *TResult_) IsSetRow() bool {
  return p.Row != nil
}

func (p *TResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetColumnValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetColumnValues = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetColumnValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColumnValues is not set"));
  }
  return nil
}

func (p *TResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnValue, 0, size)
  p.ColumnValues =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TColumnValue{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ColumnValues = append(p.ColumnValues, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRow() {
    if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
    if err := oprot.WriteBinary(p.Row); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  }
  return err
}

func (p *TResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columnValues: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnValues {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columnValues: ", p), err) }
  return err
}

func (p *TResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TResult_(%+v)", *p)
}

// Attributes:
//  - Labels
type TAuthorization struct {
  Labels []string `thrift:"labels,1" db:"labels" json:"labels,omitempty"`
}

func NewTAuthorization() *TAuthorization {
  return &TAuthorization{}
}

var TAuthorization_Labels_DEFAULT []string

func (p *TAuthorization) GetLabels() []string {
  return p.Labels
}
func (p *TAuthorization) IsSetLabels() bool {
  return p.Labels != nil
}

func (p *TAuthorization) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAuthorization)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Labels =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Labels = append(p.Labels, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAuthorization) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAuthorization"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAuthorization) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetLabels() {
    if err := oprot.WriteFieldBegin("labels", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:labels: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Labels)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Labels {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:labels: ", p), err) }
  }
  return err
}

func (p *TAuthorization) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAuthorization(%+v)", *p)
}

// Attributes:
//  - Expression
type TCellVisibility struct {
  Expression *string `thrift:"expression,1" db:"expression" json:"expression,omitempty"`
}

func NewTCellVisibility() *TCellVisibility {
  return &TCellVisibility{}
}

var TCellVisibility_Expression_DEFAULT string
func (p *TCellVisibility) GetExpression() string {
  if !p.IsSetExpression() {
    return TCellVisibility_Expression_DEFAULT
  }
return *p.Expression
}
func (p *TCellVisibility) IsSetExpression() bool {
  return p.Expression != nil
}

func (p *TCellVisibility) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCellVisibility)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Expression = &v
}
  return nil
}

func (p *TCellVisibility) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TCellVisibility"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCellVisibility) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetExpression() {
    if err := oprot.WriteFieldBegin("expression", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:expression: ", p), err) }
    if err := oprot.WriteString(string(*p.Expression)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.expression (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:expression: ", p), err) }
  }
  return err
}

func (p *TCellVisibility) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCellVisibility(%+v)", *p)
}

// Used to perform Get operations on a single row.
// 
// The scope can be further narrowed down by specifying a list of
// columns or column families.
// 
// To get everything for a row, instantiate a Get object with just the row to get.
// To further define the scope of what to get you can add a timestamp or time range
// with an optional maximum number of versions to return.
// 
// If you specify a time range and a timestamp the range is ignored.
// Timestamps on TColumns are ignored.
// 
// Attributes:
//  - Row
//  - Columns
//  - Timestamp
//  - TimeRange
//  - MaxVersions
//  - FilterString
//  - Attributes
//  - Authorizations
type TGet struct {
  Row []byte `thrift:"row,1,required" db:"row" json:"row"`
  Columns []*TColumn `thrift:"columns,2" db:"columns" json:"columns,omitempty"`
  Timestamp *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
  TimeRange *TTimeRange `thrift:"timeRange,4" db:"timeRange" json:"timeRange,omitempty"`
  MaxVersions *int32 `thrift:"maxVersions,5" db:"maxVersions" json:"maxVersions,omitempty"`
  FilterString []byte `thrift:"filterString,6" db:"filterString" json:"filterString,omitempty"`
  Attributes map[string][]byte `thrift:"attributes,7" db:"attributes" json:"attributes,omitempty"`
  Authorizations *TAuthorization `thrift:"authorizations,8" db:"authorizations" json:"authorizations,omitempty"`
}

func NewTGet() *TGet {
  return &TGet{}
}


func (p *TGet) GetRow() []byte {
  return p.Row
}
var TGet_Columns_DEFAULT []*TColumn

func (p *TGet) GetColumns() []*TColumn {
  return p.Columns
}
var TGet_Timestamp_DEFAULT int64
func (p *TGet) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TGet_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TGet_TimeRange_DEFAULT *TTimeRange
func (p *TGet) GetTimeRange() *TTimeRange {
  if !p.IsSetTimeRange() {
    return TGet_TimeRange_DEFAULT
  }
return p.TimeRange
}
var TGet_MaxVersions_DEFAULT int32
func (p *TGet) GetMaxVersions() int32 {
  if !p.IsSetMaxVersions() {
    return TGet_MaxVersions_DEFAULT
  }
return *p.MaxVersions
}
var TGet_FilterString_DEFAULT []byte

func (p *TGet) GetFilterString() []byte {
  return p.FilterString
}
var TGet_Attributes_DEFAULT map[string][]byte

func (p *TGet) GetAttributes() map[string][]byte {
  return p.Attributes
}
var TGet_Authorizations_DEFAULT *TAuthorization
func (p *TGet) GetAuthorizations() *TAuthorization {
  if !p.IsSetAuthorizations() {
    return TGet_Authorizations_DEFAULT
  }
return p.Authorizations
}
func (p *TGet) IsSetColumns() bool {
  return p.Columns != nil
}

func (p *TGet) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TGet) IsSetTimeRange() bool {
  return p.TimeRange != nil
}

func (p *TGet) IsSetMaxVersions() bool {
  return p.MaxVersions != nil
}

func (p *TGet) IsSetFilterString() bool {
  return p.FilterString != nil
}

func (p *TGet) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TGet) IsSetAuthorizations() bool {
  return p.Authorizations != nil
}

func (p *TGet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRow = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  return nil
}

func (p *TGet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TGet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TColumn{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Columns = append(p.Columns, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TGet)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TGet)  ReadField4(iprot thrift.TProtocol) error {
  p.TimeRange = &TTimeRange{}
  if err := p.TimeRange.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimeRange), err)
  }
  return nil
}

func (p *TGet)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxVersions = &v
}
  return nil
}

func (p *TGet)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FilterString = v
}
  return nil
}

func (p *TGet)  ReadField7(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Attributes[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TGet)  ReadField8(iprot thrift.TProtocol) error {
  p.Authorizations = &TAuthorization{}
  if err := p.Authorizations.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Authorizations), err)
  }
  return nil
}

func (p *TGet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *TGet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumns() {
    if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Columns {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  }
  return err
}

func (p *TGet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  }
  return err
}

func (p *TGet) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeRange() {
    if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeRange: ", p), err) }
    if err := p.TimeRange.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimeRange), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeRange: ", p), err) }
  }
  return err
}

func (p *TGet) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxVersions() {
    if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxVersions: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MaxVersions)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxVersions (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxVersions: ", p), err) }
  }
  return err
}

func (p *TGet) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilterString() {
    if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:filterString: ", p), err) }
    if err := oprot.WriteBinary(p.FilterString); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filterString (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:filterString: ", p), err) }
  }
  return err
}

func (p *TGet) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:attributes: ", p), err) }
  }
  return err
}

func (p *TGet) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorizations() {
    if err := oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:authorizations: ", p), err) }
    if err := p.Authorizations.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Authorizations), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:authorizations: ", p), err) }
  }
  return err
}

func (p *TGet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGet(%+v)", *p)
}

// Used to perform Put operations for a single row.
// 
// Add column values to this object and they'll be added.
// You can provide a default timestamp if the column values
// don't have one. If you don't provide a default timestamp
// the current time is inserted.
// 
// You can specify how this Put should be written to the write-ahead Log (WAL)
// by changing the durability. If you don't provide durability, it defaults to
// column family's default setting for durability.
// 
// Attributes:
//  - Row
//  - ColumnValues
//  - Timestamp
//  - Attributes
//  - Durability
//  - CellVisibility
type TPut struct {
  Row []byte `thrift:"row,1,required" db:"row" json:"row"`
  ColumnValues []*TColumnValue `thrift:"columnValues,2,required" db:"columnValues" json:"columnValues"`
  Timestamp *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
  // unused field # 4
  Attributes map[string][]byte `thrift:"attributes,5" db:"attributes" json:"attributes,omitempty"`
  Durability *TDurability `thrift:"durability,6" db:"durability" json:"durability,omitempty"`
  CellVisibility *TCellVisibility `thrift:"cellVisibility,7" db:"cellVisibility" json:"cellVisibility,omitempty"`
}

func NewTPut() *TPut {
  return &TPut{}
}


func (p *TPut) GetRow() []byte {
  return p.Row
}

func (p *TPut) GetColumnValues() []*TColumnValue {
  return p.ColumnValues
}
var TPut_Timestamp_DEFAULT int64
func (p *TPut) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TPut_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TPut_Attributes_DEFAULT map[string][]byte

func (p *TPut) GetAttributes() map[string][]byte {
  return p.Attributes
}
var TPut_Durability_DEFAULT TDurability
func (p *TPut) GetDurability() TDurability {
  if !p.IsSetDurability() {
    return TPut_Durability_DEFAULT
  }
return *p.Durability
}
var TPut_CellVisibility_DEFAULT *TCellVisibility
func (p *TPut) GetCellVisibility() *TCellVisibility {
  if !p.IsSetCellVisibility() {
    return TPut_CellVisibility_DEFAULT
  }
return p.CellVisibility
}
func (p *TPut) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TPut) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TPut) IsSetDurability() bool {
  return p.Durability != nil
}

func (p *TPut) IsSetCellVisibility() bool {
  return p.CellVisibility != nil
}

func (p *TPut) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;
  var issetColumnValues bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRow = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetColumnValues = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetColumnValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColumnValues is not set"));
  }
  return nil
}

func (p *TPut)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TPut)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnValue, 0, size)
  p.ColumnValues =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &TColumnValue{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.ColumnValues = append(p.ColumnValues, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPut)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TPut)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.Attributes[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TPut)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := TDurability(v)
  p.Durability = &temp
}
  return nil
}

func (p *TPut)  ReadField7(iprot thrift.TProtocol) error {
  p.CellVisibility = &TCellVisibility{}
  if err := p.CellVisibility.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CellVisibility), err)
  }
  return nil
}

func (p *TPut) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPut"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPut) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *TPut) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columnValues", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columnValues: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnValues)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnValues {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columnValues: ", p), err) }
  return err
}

func (p *TPut) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  }
  return err
}

func (p *TPut) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err) }
  }
  return err
}

func (p *TPut) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDurability() {
    if err := oprot.WriteFieldBegin("durability", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:durability: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.durability (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:durability: ", p), err) }
  }
  return err
}

func (p *TPut) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetCellVisibility() {
    if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:cellVisibility: ", p), err) }
    if err := p.CellVisibility.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CellVisibility), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:cellVisibility: ", p), err) }
  }
  return err
}

func (p *TPut) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPut(%+v)", *p)
}

// Used to perform Delete operations on a single row.
// 
// The scope can be further narrowed down by specifying a list of
// columns or column families as TColumns.
// 
// Specifying only a family in a TColumn will delete the whole family.
// If a timestamp is specified all versions with a timestamp less than
// or equal to this will be deleted. If no timestamp is specified the
// current time will be used.
// 
// Specifying a family and a column qualifier in a TColumn will delete only
// this qualifier. If a timestamp is specified only versions equal
// to this timestamp will be deleted. If no timestamp is specified the
// most recent version will be deleted.  To delete all previous versions,
// specify the DELETE_COLUMNS TDeleteType.
// 
// The top level timestamp is only used if a complete row should be deleted
// (i.e. no columns are passed) and if it is specified it works the same way
// as if you had added a TColumn for every column family and this timestamp
// (i.e. all versions older than or equal in all column families will be deleted)
// 
// You can specify how this Delete should be written to the write-ahead Log (WAL)
// by changing the durability. If you don't provide durability, it defaults to
// column family's default setting for durability.
// 
// Attributes:
//  - Row
//  - Columns
//  - Timestamp
//  - DeleteType
//  - Attributes
//  - Durability
type TDelete struct {
  Row []byte `thrift:"row,1,required" db:"row" json:"row"`
  Columns []*TColumn `thrift:"columns,2" db:"columns" json:"columns,omitempty"`
  Timestamp *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
  DeleteType TDeleteType `thrift:"deleteType,4" db:"deleteType" json:"deleteType,omitempty"`
  // unused field # 5
  Attributes map[string][]byte `thrift:"attributes,6" db:"attributes" json:"attributes,omitempty"`
  Durability *TDurability `thrift:"durability,7" db:"durability" json:"durability,omitempty"`
}

func NewTDelete() *TDelete {
  return &TDelete{
DeleteType: 1,
}
}


func (p *TDelete) GetRow() []byte {
  return p.Row
}
var TDelete_Columns_DEFAULT []*TColumn

func (p *TDelete) GetColumns() []*TColumn {
  return p.Columns
}
var TDelete_Timestamp_DEFAULT int64
func (p *TDelete) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TDelete_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TDelete_DeleteType_DEFAULT TDeleteType = 1

func (p *TDelete) GetDeleteType() TDeleteType {
  return p.DeleteType
}
var TDelete_Attributes_DEFAULT map[string][]byte

func (p *TDelete) GetAttributes() map[string][]byte {
  return p.Attributes
}
var TDelete_Durability_DEFAULT TDurability
func (p *TDelete) GetDurability() TDurability {
  if !p.IsSetDurability() {
    return TDelete_Durability_DEFAULT
  }
return *p.Durability
}
func (p *TDelete) IsSetColumns() bool {
  return p.Columns != nil
}

func (p *TDelete) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TDelete) IsSetDeleteType() bool {
  return p.DeleteType != TDelete_DeleteType_DEFAULT
}

func (p *TDelete) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TDelete) IsSetDurability() bool {
  return p.Durability != nil
}

func (p *TDelete) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRow = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  return nil
}

func (p *TDelete)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TDelete)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TColumn{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.Columns = append(p.Columns, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDelete)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TDelete)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TDeleteType(v)
  p.DeleteType = temp
}
  return nil
}

func (p *TDelete)  ReadField6(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.Attributes[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TDelete)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TDurability(v)
  p.Durability = &temp
}
  return nil
}

func (p *TDelete) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDelete"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDelete) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *TDelete) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumns() {
    if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Columns {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  }
  return err
}

func (p *TDelete) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  }
  return err
}

func (p *TDelete) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeleteType() {
    if err := oprot.WriteFieldBegin("deleteType", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deleteType: ", p), err) }
    if err := oprot.WriteI32(int32(p.DeleteType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deleteType (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deleteType: ", p), err) }
  }
  return err
}

func (p *TDelete) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:attributes: ", p), err) }
  }
  return err
}

func (p *TDelete) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDurability() {
    if err := oprot.WriteFieldBegin("durability", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:durability: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.durability (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:durability: ", p), err) }
  }
  return err
}

func (p *TDelete) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDelete(%+v)", *p)
}

// Used to perform Increment operations for a single row.
// 
// You can specify how this Increment should be written to the write-ahead Log (WAL)
// by changing the durability. If you don't provide durability, it defaults to
// column family's default setting for durability.
// 
// Attributes:
//  - Row
//  - Columns
//  - Attributes
//  - Durability
//  - CellVisibility
type TIncrement struct {
  Row []byte `thrift:"row,1,required" db:"row" json:"row"`
  Columns []*TColumnIncrement `thrift:"columns,2,required" db:"columns" json:"columns"`
  // unused field # 3
  Attributes map[string][]byte `thrift:"attributes,4" db:"attributes" json:"attributes,omitempty"`
  Durability *TDurability `thrift:"durability,5" db:"durability" json:"durability,omitempty"`
  CellVisibility *TCellVisibility `thrift:"cellVisibility,6" db:"cellVisibility" json:"cellVisibility,omitempty"`
}

func NewTIncrement() *TIncrement {
  return &TIncrement{}
}


func (p *TIncrement) GetRow() []byte {
  return p.Row
}

func (p *TIncrement) GetColumns() []*TColumnIncrement {
  return p.Columns
}
var TIncrement_Attributes_DEFAULT map[string][]byte

func (p *TIncrement) GetAttributes() map[string][]byte {
  return p.Attributes
}
var TIncrement_Durability_DEFAULT TDurability
func (p *TIncrement) GetDurability() TDurability {
  if !p.IsSetDurability() {
    return TIncrement_Durability_DEFAULT
  }
return *p.Durability
}
var TIncrement_CellVisibility_DEFAULT *TCellVisibility
func (p *TIncrement) GetCellVisibility() *TCellVisibility {
  if !p.IsSetCellVisibility() {
    return TIncrement_CellVisibility_DEFAULT
  }
return p.CellVisibility
}
func (p *TIncrement) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TIncrement) IsSetDurability() bool {
  return p.Durability != nil
}

func (p *TIncrement) IsSetCellVisibility() bool {
  return p.CellVisibility != nil
}

func (p *TIncrement) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;
  var issetColumns bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRow = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetColumns = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetColumns{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Columns is not set"));
  }
  return nil
}

func (p *TIncrement)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TIncrement)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnIncrement, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &TColumnIncrement{
    Amount: 1,
}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Columns = append(p.Columns, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TIncrement)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
var _val13 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val13 = v
}
    p.Attributes[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TIncrement)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TDurability(v)
  p.Durability = &temp
}
  return nil
}

func (p *TIncrement)  ReadField6(iprot thrift.TProtocol) error {
  p.CellVisibility = &TCellVisibility{}
  if err := p.CellVisibility.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CellVisibility), err)
  }
  return nil
}

func (p *TIncrement) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TIncrement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  return err
}

func (p *TIncrement) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err) }
  }
  return err
}

func (p *TIncrement) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetDurability() {
    if err := oprot.WriteFieldBegin("durability", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:durability: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.durability (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:durability: ", p), err) }
  }
  return err
}

func (p *TIncrement) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetCellVisibility() {
    if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cellVisibility: ", p), err) }
    if err := p.CellVisibility.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CellVisibility), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cellVisibility: ", p), err) }
  }
  return err
}

func (p *TIncrement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIncrement(%+v)", *p)
}

// Attributes:
//  - Row
//  - Columns
//  - Attributes
//  - Durability
//  - CellVisibility
type TAppend struct {
  Row []byte `thrift:"row,1,required" db:"row" json:"row"`
  Columns []*TColumnValue `thrift:"columns,2,required" db:"columns" json:"columns"`
  Attributes map[string][]byte `thrift:"attributes,3" db:"attributes" json:"attributes,omitempty"`
  Durability *TDurability `thrift:"durability,4" db:"durability" json:"durability,omitempty"`
  CellVisibility *TCellVisibility `thrift:"cellVisibility,5" db:"cellVisibility" json:"cellVisibility,omitempty"`
}

func NewTAppend() *TAppend {
  return &TAppend{}
}


func (p *TAppend) GetRow() []byte {
  return p.Row
}

func (p *TAppend) GetColumns() []*TColumnValue {
  return p.Columns
}
var TAppend_Attributes_DEFAULT map[string][]byte

func (p *TAppend) GetAttributes() map[string][]byte {
  return p.Attributes
}
var TAppend_Durability_DEFAULT TDurability
func (p *TAppend) GetDurability() TDurability {
  if !p.IsSetDurability() {
    return TAppend_Durability_DEFAULT
  }
return *p.Durability
}
var TAppend_CellVisibility_DEFAULT *TCellVisibility
func (p *TAppend) GetCellVisibility() *TCellVisibility {
  if !p.IsSetCellVisibility() {
    return TAppend_CellVisibility_DEFAULT
  }
return p.CellVisibility
}
func (p *TAppend) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TAppend) IsSetDurability() bool {
  return p.Durability != nil
}

func (p *TAppend) IsSetCellVisibility() bool {
  return p.CellVisibility != nil
}

func (p *TAppend) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;
  var issetColumns bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRow = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetColumns = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetColumns{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Columns is not set"));
  }
  return nil
}

func (p *TAppend)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TAppend)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumnValue, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &TColumnValue{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Columns = append(p.Columns, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAppend)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key15 = v
}
var _val16 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val16 = v
}
    p.Attributes[_key15] = _val16
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TAppend)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TDurability(v)
  p.Durability = &temp
}
  return nil
}

func (p *TAppend)  ReadField5(iprot thrift.TProtocol) error {
  p.CellVisibility = &TCellVisibility{}
  if err := p.CellVisibility.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CellVisibility), err)
  }
  return nil
}

func (p *TAppend) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TAppend"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAppend) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *TAppend) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  return err
}

func (p *TAppend) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attributes: ", p), err) }
  }
  return err
}

func (p *TAppend) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetDurability() {
    if err := oprot.WriteFieldBegin("durability", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:durability: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.durability (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:durability: ", p), err) }
  }
  return err
}

func (p *TAppend) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCellVisibility() {
    if err := oprot.WriteFieldBegin("cellVisibility", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cellVisibility: ", p), err) }
    if err := p.CellVisibility.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CellVisibility), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cellVisibility: ", p), err) }
  }
  return err
}

func (p *TAppend) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAppend(%+v)", *p)
}

// Any timestamps in the columns are ignored but the colFamTimeRangeMap included, use timeRange to select by timestamp.
// Max versions defaults to 1.
// 
// Attributes:
//  - StartRow
//  - StopRow
//  - Columns
//  - Caching
//  - MaxVersions
//  - TimeRange
//  - FilterString
//  - BatchSize
//  - Attributes
//  - Authorizations
//  - Reversed
//  - CacheBlocks
//  - ColFamTimeRangeMap
//  - ReadType
//  - Limit
type TScan struct {
  StartRow []byte `thrift:"startRow,1" db:"startRow" json:"startRow,omitempty"`
  StopRow []byte `thrift:"stopRow,2" db:"stopRow" json:"stopRow,omitempty"`
  Columns []*TColumn `thrift:"columns,3" db:"columns" json:"columns,omitempty"`
  Caching *int32 `thrift:"caching,4" db:"caching" json:"caching,omitempty"`
  MaxVersions int32 `thrift:"maxVersions,5" db:"maxVersions" json:"maxVersions,omitempty"`
  TimeRange *TTimeRange `thrift:"timeRange,6" db:"timeRange" json:"timeRange,omitempty"`
  FilterString []byte `thrift:"filterString,7" db:"filterString" json:"filterString,omitempty"`
  BatchSize *int32 `thrift:"batchSize,8" db:"batchSize" json:"batchSize,omitempty"`
  Attributes map[string][]byte `thrift:"attributes,9" db:"attributes" json:"attributes,omitempty"`
  Authorizations *TAuthorization `thrift:"authorizations,10" db:"authorizations" json:"authorizations,omitempty"`
  Reversed *bool `thrift:"reversed,11" db:"reversed" json:"reversed,omitempty"`
  CacheBlocks *bool `thrift:"cacheBlocks,12" db:"cacheBlocks" json:"cacheBlocks,omitempty"`
  ColFamTimeRangeMap map[string]*TTimeRange `thrift:"colFamTimeRangeMap,13" db:"colFamTimeRangeMap" json:"colFamTimeRangeMap,omitempty"`
  ReadType *TReadType `thrift:"readType,14" db:"readType" json:"readType,omitempty"`
  Limit *int32 `thrift:"limit,15" db:"limit" json:"limit,omitempty"`
}

func NewTScan() *TScan {
  return &TScan{
MaxVersions: 1,
}
}

var TScan_StartRow_DEFAULT []byte

func (p *TScan) GetStartRow() []byte {
  return p.StartRow
}
var TScan_StopRow_DEFAULT []byte

func (p *TScan) GetStopRow() []byte {
  return p.StopRow
}
var TScan_Columns_DEFAULT []*TColumn

func (p *TScan) GetColumns() []*TColumn {
  return p.Columns
}
var TScan_Caching_DEFAULT int32
func (p *TScan) GetCaching() int32 {
  if !p.IsSetCaching() {
    return TScan_Caching_DEFAULT
  }
return *p.Caching
}
var TScan_MaxVersions_DEFAULT int32 = 1

func (p *TScan) GetMaxVersions() int32 {
  return p.MaxVersions
}
var TScan_TimeRange_DEFAULT *TTimeRange
func (p *TScan) GetTimeRange() *TTimeRange {
  if !p.IsSetTimeRange() {
    return TScan_TimeRange_DEFAULT
  }
return p.TimeRange
}
var TScan_FilterString_DEFAULT []byte

func (p *TScan) GetFilterString() []byte {
  return p.FilterString
}
var TScan_BatchSize_DEFAULT int32
func (p *TScan) GetBatchSize() int32 {
  if !p.IsSetBatchSize() {
    return TScan_BatchSize_DEFAULT
  }
return *p.BatchSize
}
var TScan_Attributes_DEFAULT map[string][]byte

func (p *TScan) GetAttributes() map[string][]byte {
  return p.Attributes
}
var TScan_Authorizations_DEFAULT *TAuthorization
func (p *TScan) GetAuthorizations() *TAuthorization {
  if !p.IsSetAuthorizations() {
    return TScan_Authorizations_DEFAULT
  }
return p.Authorizations
}
var TScan_Reversed_DEFAULT bool
func (p *TScan) GetReversed() bool {
  if !p.IsSetReversed() {
    return TScan_Reversed_DEFAULT
  }
return *p.Reversed
}
var TScan_CacheBlocks_DEFAULT bool
func (p *TScan) GetCacheBlocks() bool {
  if !p.IsSetCacheBlocks() {
    return TScan_CacheBlocks_DEFAULT
  }
return *p.CacheBlocks
}
var TScan_ColFamTimeRangeMap_DEFAULT map[string]*TTimeRange

func (p *TScan) GetColFamTimeRangeMap() map[string]*TTimeRange {
  return p.ColFamTimeRangeMap
}
var TScan_ReadType_DEFAULT TReadType
func (p *TScan) GetReadType() TReadType {
  if !p.IsSetReadType() {
    return TScan_ReadType_DEFAULT
  }
return *p.ReadType
}
var TScan_Limit_DEFAULT int32
func (p *TScan) GetLimit() int32 {
  if !p.IsSetLimit() {
    return TScan_Limit_DEFAULT
  }
return *p.Limit
}
func (p *TScan) IsSetStartRow() bool {
  return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
  return p.StopRow != nil
}

func (p *TScan) IsSetColumns() bool {
  return p.Columns != nil
}

func (p *TScan) IsSetCaching() bool {
  return p.Caching != nil
}

func (p *TScan) IsSetMaxVersions() bool {
  return p.MaxVersions != TScan_MaxVersions_DEFAULT
}

func (p *TScan) IsSetTimeRange() bool {
  return p.TimeRange != nil
}

func (p *TScan) IsSetFilterString() bool {
  return p.FilterString != nil
}

func (p *TScan) IsSetBatchSize() bool {
  return p.BatchSize != nil
}

func (p *TScan) IsSetAttributes() bool {
  return p.Attributes != nil
}

func (p *TScan) IsSetAuthorizations() bool {
  return p.Authorizations != nil
}

func (p *TScan) IsSetReversed() bool {
  return p.Reversed != nil
}

func (p *TScan) IsSetCacheBlocks() bool {
  return p.CacheBlocks != nil
}

func (p *TScan) IsSetColFamTimeRangeMap() bool {
  return p.ColFamTimeRangeMap != nil
}

func (p *TScan) IsSetReadType() bool {
  return p.ReadType != nil
}

func (p *TScan) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TScan)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartRow = v
}
  return nil
}

func (p *TScan)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StopRow = v
}
  return nil
}

func (p *TScan)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TColumn, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &TColumn{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Columns = append(p.Columns, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TScan)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Caching = &v
}
  return nil
}

func (p *TScan)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MaxVersions = v
}
  return nil
}

func (p *TScan)  ReadField6(iprot thrift.TProtocol) error {
  p.TimeRange = &TTimeRange{}
  if err := p.TimeRange.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimeRange), err)
  }
  return nil
}

func (p *TScan)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.FilterString = v
}
  return nil
}

func (p *TScan)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BatchSize = &v
}
  return nil
}

func (p *TScan)  ReadField9(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key18 = v
}
var _val19 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val19 = v
}
    p.Attributes[_key18] = _val19
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TScan)  ReadField10(iprot thrift.TProtocol) error {
  p.Authorizations = &TAuthorization{}
  if err := p.Authorizations.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Authorizations), err)
  }
  return nil
}

func (p *TScan)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Reversed = &v
}
  return nil
}

func (p *TScan)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.CacheBlocks = &v
}
  return nil
}

func (p *TScan)  ReadField13(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*TTimeRange, size)
  p.ColFamTimeRangeMap =  tMap
  for i := 0; i < size; i ++ {
var _key20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key20 = v
}
    _val21 := &TTimeRange{}
    if err := _val21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val21), err)
    }
    p.ColFamTimeRangeMap[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TScan)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := TReadType(v)
  p.ReadType = &temp
}
  return nil
}

func (p *TScan)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *TScan) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TScan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartRow() {
    if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startRow: ", p), err) }
    if err := oprot.WriteBinary(p.StartRow); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startRow (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startRow: ", p), err) }
  }
  return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStopRow() {
    if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stopRow: ", p), err) }
    if err := oprot.WriteBinary(p.StopRow); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stopRow (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stopRow: ", p), err) }
  }
  return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumns() {
    if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Columns {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err) }
  }
  return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetCaching() {
    if err := oprot.WriteFieldBegin("caching", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:caching: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Caching)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.caching (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:caching: ", p), err) }
  }
  return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetMaxVersions() {
    if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxVersions: ", p), err) }
    if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.maxVersions (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxVersions: ", p), err) }
  }
  return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeRange() {
    if err := oprot.WriteFieldBegin("timeRange", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timeRange: ", p), err) }
    if err := p.TimeRange.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimeRange), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timeRange: ", p), err) }
  }
  return err
}

func (p *TScan) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilterString() {
    if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:filterString: ", p), err) }
    if err := oprot.WriteBinary(p.FilterString); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filterString (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:filterString: ", p), err) }
  }
  return err
}

func (p *TScan) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetBatchSize() {
    if err := oprot.WriteFieldBegin("batchSize", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:batchSize: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BatchSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.batchSize (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:batchSize: ", p), err) }
  }
  return err
}

func (p *TScan) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetAttributes() {
    if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:attributes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Attributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:attributes: ", p), err) }
  }
  return err
}

func (p *TScan) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetAuthorizations() {
    if err := oprot.WriteFieldBegin("authorizations", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:authorizations: ", p), err) }
    if err := p.Authorizations.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Authorizations), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:authorizations: ", p), err) }
  }
  return err
}

func (p *TScan) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetReversed() {
    if err := oprot.WriteFieldBegin("reversed", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:reversed: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Reversed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reversed (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:reversed: ", p), err) }
  }
  return err
}

func (p *TScan) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetCacheBlocks() {
    if err := oprot.WriteFieldBegin("cacheBlocks", thrift.BOOL, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:cacheBlocks: ", p), err) }
    if err := oprot.WriteBool(bool(*p.CacheBlocks)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cacheBlocks (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:cacheBlocks: ", p), err) }
  }
  return err
}

func (p *TScan) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetColFamTimeRangeMap() {
    if err := oprot.WriteFieldBegin("colFamTimeRangeMap", thrift.MAP, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:colFamTimeRangeMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ColFamTimeRangeMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ColFamTimeRangeMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:colFamTimeRangeMap: ", p), err) }
  }
  return err
}

func (p *TScan) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetReadType() {
    if err := oprot.WriteFieldBegin("readType", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:readType: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReadType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readType (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:readType: ", p), err) }
  }
  return err
}

func (p *TScan) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin("limit", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:limit: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:limit: ", p), err) }
  }
  return err
}

func (p *TScan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TScan(%+v)", *p)
}

// Atomic mutation for the specified row. It can be either Put or Delete.
// 
// Attributes:
//  - Put
//  - DeleteSingle
type TMutation struct {
  Put *TPut `thrift:"put,1" db:"put" json:"put,omitempty"`
  DeleteSingle *TDelete `thrift:"deleteSingle,2" db:"deleteSingle" json:"deleteSingle,omitempty"`
}

func NewTMutation() *TMutation {
  return &TMutation{}
}

var TMutation_Put_DEFAULT *TPut
func (p *TMutation) GetPut() *TPut {
  if !p.IsSetPut() {
    return TMutation_Put_DEFAULT
  }
return p.Put
}
var TMutation_DeleteSingle_DEFAULT *TDelete
func (p *TMutation) GetDeleteSingle() *TDelete {
  if !p.IsSetDeleteSingle() {
    return TMutation_DeleteSingle_DEFAULT
  }
return p.DeleteSingle
}
func (p *TMutation) CountSetFieldsTMutation() int {
  count := 0
  if (p.IsSetPut()) {
    count++
  }
  if (p.IsSetDeleteSingle()) {
    count++
  }
  return count

}

func (p *TMutation) IsSetPut() bool {
  return p.Put != nil
}

func (p *TMutation) IsSetDeleteSingle() bool {
  return p.DeleteSingle != nil
}

func (p *TMutation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMutation)  ReadField1(iprot thrift.TProtocol) error {
  p.Put = &TPut{}
  if err := p.Put.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Put), err)
  }
  return nil
}

func (p *TMutation)  ReadField2(iprot thrift.TProtocol) error {
  p.DeleteSingle = &TDelete{
  DeleteType:   1,
}
  if err := p.DeleteSingle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeleteSingle), err)
  }
  return nil
}

func (p *TMutation) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsTMutation(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("TMutation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMutation) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetPut() {
    if err := oprot.WriteFieldBegin("put", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:put: ", p), err) }
    if err := p.Put.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Put), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:put: ", p), err) }
  }
  return err
}

func (p *TMutation) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeleteSingle() {
    if err := oprot.WriteFieldBegin("deleteSingle", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deleteSingle: ", p), err) }
    if err := p.DeleteSingle.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeleteSingle), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deleteSingle: ", p), err) }
  }
  return err
}

func (p *TMutation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMutation(%+v)", *p)
}

// A TRowMutations object is used to apply a number of Mutations to a single row.
// 
// Attributes:
//  - Row
//  - Mutations
type TRowMutations struct {
  Row []byte `thrift:"row,1,required" db:"row" json:"row"`
  Mutations []*TMutation `thrift:"mutations,2,required" db:"mutations" json:"mutations"`
}

func NewTRowMutations() *TRowMutations {
  return &TRowMutations{}
}


func (p *TRowMutations) GetRow() []byte {
  return p.Row
}

func (p *TRowMutations) GetMutations() []*TMutation {
  return p.Mutations
}
func (p *TRowMutations) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRow bool = false;
  var issetMutations bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRow = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMutations = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetMutations{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Mutations is not set"));
  }
  return nil
}

func (p *TRowMutations)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *TRowMutations)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMutation, 0, size)
  p.Mutations =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &TMutation{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Mutations = append(p.Mutations, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TRowMutations) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TRowMutations"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TRowMutations) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err) }
  return err
}

func (p *TRowMutations) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mutations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Mutations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mutations: ", p), err) }
  return err
}

func (p *TRowMutations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TRowMutations(%+v)", *p)
}

// Attributes:
//  - RegionId
//  - TableName
//  - StartKey
//  - EndKey
//  - Offline
//  - Split
//  - ReplicaId
type THRegionInfo struct {
  RegionId int64 `thrift:"regionId,1,required" db:"regionId" json:"regionId"`
  TableName []byte `thrift:"tableName,2,required" db:"tableName" json:"tableName"`
  StartKey []byte `thrift:"startKey,3" db:"startKey" json:"startKey,omitempty"`
  EndKey []byte `thrift:"endKey,4" db:"endKey" json:"endKey,omitempty"`
  Offline *bool `thrift:"offline,5" db:"offline" json:"offline,omitempty"`
  Split *bool `thrift:"split,6" db:"split" json:"split,omitempty"`
  ReplicaId *int32 `thrift:"replicaId,7" db:"replicaId" json:"replicaId,omitempty"`
}

func NewTHRegionInfo() *THRegionInfo {
  return &THRegionInfo{}
}


func (p *THRegionInfo) GetRegionId() int64 {
  return p.RegionId
}

func (p *THRegionInfo) GetTableName() []byte {
  return p.TableName
}
var THRegionInfo_StartKey_DEFAULT []byte

func (p *THRegionInfo) GetStartKey() []byte {
  return p.StartKey
}
var THRegionInfo_EndKey_DEFAULT []byte

func (p *THRegionInfo) GetEndKey() []byte {
  return p.EndKey
}
var THRegionInfo_Offline_DEFAULT bool
func (p *THRegionInfo) GetOffline() bool {
  if !p.IsSetOffline() {
    return THRegionInfo_Offline_DEFAULT
  }
return *p.Offline
}
var THRegionInfo_Split_DEFAULT bool
func (p *THRegionInfo) GetSplit() bool {
  if !p.IsSetSplit() {
    return THRegionInfo_Split_DEFAULT
  }
return *p.Split
}
var THRegionInfo_ReplicaId_DEFAULT int32
func (p *THRegionInfo) GetReplicaId() int32 {
  if !p.IsSetReplicaId() {
    return THRegionInfo_ReplicaId_DEFAULT
  }
return *p.ReplicaId
}
func (p *THRegionInfo) IsSetStartKey() bool {
  return p.StartKey != nil
}

func (p *THRegionInfo) IsSetEndKey() bool {
  return p.EndKey != nil
}

func (p *THRegionInfo) IsSetOffline() bool {
  return p.Offline != nil
}

func (p *THRegionInfo) IsSetSplit() bool {
  return p.Split != nil
}

func (p *THRegionInfo) IsSetReplicaId() bool {
  return p.ReplicaId != nil
}

func (p *THRegionInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRegionId bool = false;
  var issetTableName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetRegionId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTableName = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRegionId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RegionId is not set"));
  }
  if !issetTableName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TableName is not set"));
  }
  return nil
}

func (p *THRegionInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RegionId = v
}
  return nil
}

func (p *THRegionInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *THRegionInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartKey = v
}
  return nil
}

func (p *THRegionInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndKey = v
}
  return nil
}

func (p *THRegionInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Offline = &v
}
  return nil
}

func (p *THRegionInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Split = &v
}
  return nil
}

func (p *THRegionInfo)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ReplicaId = &v
}
  return nil
}

func (p *THRegionInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("THRegionInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THRegionInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regionId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:regionId: ", p), err) }
  if err := oprot.WriteI64(int64(p.RegionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:regionId: ", p), err) }
  return err
}

func (p *THRegionInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err) }
  if err := oprot.WriteBinary(p.TableName); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err) }
  return err
}

func (p *THRegionInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartKey() {
    if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startKey: ", p), err) }
    if err := oprot.WriteBinary(p.StartKey); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startKey (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startKey: ", p), err) }
  }
  return err
}

func (p *THRegionInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEndKey() {
    if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endKey: ", p), err) }
    if err := oprot.WriteBinary(p.EndKey); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endKey (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endKey: ", p), err) }
  }
  return err
}

func (p *THRegionInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetOffline() {
    if err := oprot.WriteFieldBegin("offline", thrift.BOOL, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:offline: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Offline)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.offline (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:offline: ", p), err) }
  }
  return err
}

func (p *THRegionInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplit() {
    if err := oprot.WriteFieldBegin("split", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:split: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Split)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.split (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:split: ", p), err) }
  }
  return err
}

func (p *THRegionInfo) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetReplicaId() {
    if err := oprot.WriteFieldBegin("replicaId", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:replicaId: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ReplicaId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.replicaId (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:replicaId: ", p), err) }
  }
  return err
}

func (p *THRegionInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THRegionInfo(%+v)", *p)
}

// Attributes:
//  - HostName
//  - Port
//  - StartCode
type TServerName struct {
  HostName string `thrift:"hostName,1,required" db:"hostName" json:"hostName"`
  Port *int32 `thrift:"port,2" db:"port" json:"port,omitempty"`
  StartCode *int64 `thrift:"startCode,3" db:"startCode" json:"startCode,omitempty"`
}

func NewTServerName() *TServerName {
  return &TServerName{}
}


func (p *TServerName) GetHostName() string {
  return p.HostName
}
var TServerName_Port_DEFAULT int32
func (p *TServerName) GetPort() int32 {
  if !p.IsSetPort() {
    return TServerName_Port_DEFAULT
  }
return *p.Port
}
var TServerName_StartCode_DEFAULT int64
func (p *TServerName) GetStartCode() int64 {
  if !p.IsSetStartCode() {
    return TServerName_StartCode_DEFAULT
  }
return *p.StartCode
}
func (p *TServerName) IsSetPort() bool {
  return p.Port != nil
}

func (p *TServerName) IsSetStartCode() bool {
  return p.StartCode != nil
}

func (p *TServerName) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHostName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHostName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHostName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostName is not set"));
  }
  return nil
}

func (p *TServerName)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *TServerName)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = &v
}
  return nil
}

func (p *TServerName)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartCode = &v
}
  return nil
}

func (p *TServerName) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TServerName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServerName) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostName: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostName: ", p), err) }
  return err
}

func (p *TServerName) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPort() {
    if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Port)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  }
  return err
}

func (p *TServerName) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStartCode() {
    if err := oprot.WriteFieldBegin("startCode", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startCode: ", p), err) }
    if err := oprot.WriteI64(int64(*p.StartCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startCode (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startCode: ", p), err) }
  }
  return err
}

func (p *TServerName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerName(%+v)", *p)
}

// Attributes:
//  - ServerName
//  - RegionInfo
type THRegionLocation struct {
  ServerName *TServerName `thrift:"serverName,1,required" db:"serverName" json:"serverName"`
  RegionInfo *THRegionInfo `thrift:"regionInfo,2,required" db:"regionInfo" json:"regionInfo"`
}

func NewTHRegionLocation() *THRegionLocation {
  return &THRegionLocation{}
}

var THRegionLocation_ServerName_DEFAULT *TServerName
func (p *THRegionLocation) GetServerName() *TServerName {
  if !p.IsSetServerName() {
    return THRegionLocation_ServerName_DEFAULT
  }
return p.ServerName
}
var THRegionLocation_RegionInfo_DEFAULT *THRegionInfo
func (p *THRegionLocation) GetRegionInfo() *THRegionInfo {
  if !p.IsSetRegionInfo() {
    return THRegionLocation_RegionInfo_DEFAULT
  }
return p.RegionInfo
}
func (p *THRegionLocation) IsSetServerName() bool {
  return p.ServerName != nil
}

func (p *THRegionLocation) IsSetRegionInfo() bool {
  return p.RegionInfo != nil
}

func (p *THRegionLocation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServerName bool = false;
  var issetRegionInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetServerName = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRegionInfo = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServerName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerName is not set"));
  }
  if !issetRegionInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RegionInfo is not set"));
  }
  return nil
}

func (p *THRegionLocation)  ReadField1(iprot thrift.TProtocol) error {
  p.ServerName = &TServerName{}
  if err := p.ServerName.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerName), err)
  }
  return nil
}

func (p *THRegionLocation)  ReadField2(iprot thrift.TProtocol) error {
  p.RegionInfo = &THRegionInfo{}
  if err := p.RegionInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RegionInfo), err)
  }
  return nil
}

func (p *THRegionLocation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("THRegionLocation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THRegionLocation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverName", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverName: ", p), err) }
  if err := p.ServerName.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerName), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverName: ", p), err) }
  return err
}

func (p *THRegionLocation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regionInfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:regionInfo: ", p), err) }
  if err := p.RegionInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RegionInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:regionInfo: ", p), err) }
  return err
}

func (p *THRegionLocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THRegionLocation(%+v)", *p)
}

// A TIOError exception signals that an error occurred communicating
// to the HBase master or a HBase region server. Also used to return
// more general HBase error conditions.
// 
// Attributes:
//  - Message
type TIOError struct {
  Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
}

func NewTIOError() *TIOError {
  return &TIOError{}
}

var TIOError_Message_DEFAULT string
func (p *TIOError) GetMessage() string {
  if !p.IsSetMessage() {
    return TIOError_Message_DEFAULT
  }
return *p.Message
}
func (p *TIOError) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TIOError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIOError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *TIOError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TIOError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIOError) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  }
  return err
}

func (p *TIOError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIOError(%+v)", *p)
}

func (p *TIOError) Error() string {
  return p.String()
}

// A TIllegalArgument exception indicates an illegal or invalid
// argument was passed into a procedure.
// 
// Attributes:
//  - Message
type TIllegalArgument struct {
  Message *string `thrift:"message,1" db:"message" json:"message,omitempty"`
}

func NewTIllegalArgument() *TIllegalArgument {
  return &TIllegalArgument{}
}

var TIllegalArgument_Message_DEFAULT string
func (p *TIllegalArgument) GetMessage() string {
  if !p.IsSetMessage() {
    return TIllegalArgument_Message_DEFAULT
  }
return *p.Message
}
func (p *TIllegalArgument) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TIllegalArgument) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIllegalArgument)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *TIllegalArgument) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TIllegalArgument"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIllegalArgument) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  }
  return err
}

func (p *TIllegalArgument) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIllegalArgument(%+v)", *p)
}

func (p *TIllegalArgument) Error() string {
  return p.String()
}

type THBaseService interface {
  // Test for the existence of columns in the table, as specified in the TGet.
  // 
  // @return true if the specified TGet matches one or more keys, false if not
  // 
  // Parameters:
  //  - Table: the table to check on
  //  - Tget: the TGet to check for
  Exists(table []byte, tget *TGet) (r bool, err error)
  // Test for the existence of columns in the table, as specified by the TGets.
  // 
  // This will return an array of booleans. Each value will be true if the related Get matches
  // one or more keys, false if not.
  // 
  // Parameters:
  //  - Table: the table to check on
  //  - Tgets: a list of TGets to check for
  ExistsAll(table []byte, tgets []*TGet) (r []bool, err error)
  // Method for getting data from a row.
  // 
  // If the row cannot be found an empty Result is returned.
  // This can be checked by the empty field of the TResult
  // 
  // @return the result
  // 
  // Parameters:
  //  - Table: the table to get from
  //  - Tget: the TGet to fetch
  Get(table []byte, tget *TGet) (r *TResult_, err error)
  // Method for getting multiple rows.
  // 
  // If a row cannot be found there will be a null
  // value in the result list for that TGet at the
  // same position.
  // 
  // So the Results are in the same order as the TGets.
  // 
  // Parameters:
  //  - Table: the table to get from
  //  - Tgets: a list of TGets to fetch, the Result list
  // will have the Results at corresponding positions
  // or null if there was an error
  GetMultiple(table []byte, tgets []*TGet) (r []*TResult_, err error)
  // Commit a TPut to a table.
  // 
  // Parameters:
  //  - Table: the table to put data in
  //  - Tput: the TPut to put
  Put(table []byte, tput *TPut) (err error)
  // Atomically checks if a row/family/qualifier value matches the expected
  // value. If it does, it adds the TPut.
  // 
  // @return true if the new put was executed, false otherwise
  // 
  // Parameters:
  //  - Table: to check in and put to
  //  - Row: row to check
  //  - Family: column family to check
  //  - Qualifier: column qualifier to check
  //  - Value: the expected value, if not provided the
  // check is for the non-existence of the
  // column in question
  //  - Tput: the TPut to put if the check succeeds
  CheckAndPut(table []byte, row []byte, family []byte, qualifier []byte, value []byte, tput *TPut) (r bool, err error)
  // Commit a List of Puts to the table.
  // 
  // Parameters:
  //  - Table: the table to put data in
  //  - Tputs: a list of TPuts to commit
  PutMultiple(table []byte, tputs []*TPut) (err error)
  // Deletes as specified by the TDelete.
  // 
  // Note: "delete" is a reserved keyword and cannot be used in Thrift
  // thus the inconsistent naming scheme from the other functions.
  // 
  // Parameters:
  //  - Table: the table to delete from
  //  - Tdelete: the TDelete to delete
  DeleteSingle(table []byte, tdelete *TDelete) (err error)
  // Bulk commit a List of TDeletes to the table.
  // 
  // Throws a TIOError if any of the deletes fail.
  // 
  // Always returns an empty list for backwards compatibility.
  // 
  // Parameters:
  //  - Table: the table to delete from
  //  - Tdeletes: list of TDeletes to delete
  DeleteMultiple(table []byte, tdeletes []*TDelete) (r []*TDelete, err error)
  // Atomically checks if a row/family/qualifier value matches the expected
  // value. If it does, it adds the delete.
  // 
  // @return true if the new delete was executed, false otherwise
  // 
  // Parameters:
  //  - Table: to check in and delete from
  //  - Row: row to check
  //  - Family: column family to check
  //  - Qualifier: column qualifier to check
  //  - Value: the expected value, if not provided the
  // check is for the non-existence of the
  // column in question
  //  - Tdelete: the TDelete to execute if the check succeeds
  CheckAndDelete(table []byte, row []byte, family []byte, qualifier []byte, value []byte, tdelete *TDelete) (r bool, err error)
  // Parameters:
  //  - Table: the table to increment the value on
  //  - Tincrement: the TIncrement to increment
  Increment(table []byte, tincrement *TIncrement) (r *TResult_, err error)
  // Parameters:
  //  - Table: the table to append the value on
  //  - Tappend: the TAppend to append
  Append(table []byte, tappend *TAppend) (r *TResult_, err error)
  // Get a Scanner for the provided TScan object.
  // 
  // @return Scanner Id to be used with other scanner procedures
  // 
  // Parameters:
  //  - Table: the table to get the Scanner for
  //  - Tscan: the scan object to get a Scanner for
  OpenScanner(table []byte, tscan *TScan) (r int32, err error)
  // Grabs multiple rows from a Scanner.
  // 
  // @return Between zero and numRows TResults
  // 
  // Parameters:
  //  - ScannerId: the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
  //  - NumRows: number of rows to return
  GetScannerRows(scannerId int32, numRows int32) (r []*TResult_, err error)
  // Closes the scanner. Should be called to free server side resources timely.
  // Typically close once the scanner is not needed anymore, i.e. after looping
  // over it to get all the required rows.
  // 
  // Parameters:
  //  - ScannerId: the Id of the Scanner to close *
  CloseScanner(scannerId int32) (err error)
  // mutateRow performs multiple mutations atomically on a single row.
  // 
  // Parameters:
  //  - Table: table to apply the mutations
  //  - TrowMutations: mutations to apply
  MutateRow(table []byte, trowMutations *TRowMutations) (err error)
  // Get results for the provided TScan object.
  // This helper function opens a scanner, get the results and close the scanner.
  // 
  // @return between zero and numRows TResults
  // 
  // Parameters:
  //  - Table: the table to get the Scanner for
  //  - Tscan: the scan object to get a Scanner for
  //  - NumRows: number of rows to return
  GetScannerResults(table []byte, tscan *TScan, numRows int32) (r []*TResult_, err error)
  // Given a table and a row get the location of the region that
  // would contain the given row key.
  // 
  // reload = true means the cache will be cleared and the location
  // will be fetched from meta.
  // 
  // Parameters:
  //  - Table
  //  - Row
  //  - Reload
  GetRegionLocation(table []byte, row []byte, reload bool) (r *THRegionLocation, err error)
  // Get all of the region locations for a given table.
  // 
  // 
  // Parameters:
  //  - Table
  GetAllRegionLocations(table []byte) (r []*THRegionLocation, err error)
  // Atomically checks if a row/family/qualifier value matches the expected
  // value. If it does, it mutates the row.
  // 
  // @return true if the row was mutated, false otherwise
  // 
  // Parameters:
  //  - Table: to check in and delete from
  //  - Row: row to check
  //  - Family: column family to check
  //  - Qualifier: column qualifier to check
  //  - CompareOp: comparison to make on the value
  //  - Value: the expected value to be compared against, if not provided the
  // check is for the non-existence of the column in question
  //  - RowMutations: row mutations to execute if the value matches
  CheckAndMutate(table []byte, row []byte, family []byte, qualifier []byte, compareOp TCompareOp, value []byte, rowMutations *TRowMutations) (r bool, err error)
}

type THBaseServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewTHBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *THBaseServiceClient {
  return &THBaseServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewTHBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *THBaseServiceClient {
  return &THBaseServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Test for the existence of columns in the table, as specified in the TGet.
// 
// @return true if the specified TGet matches one or more keys, false if not
// 
// Parameters:
//  - Table: the table to check on
//  - Tget: the TGet to check for
func (p *THBaseServiceClient) Exists(table []byte, tget *TGet) (r bool, err error) {
  if err = p.sendExists(table, tget); err != nil { return }
  return p.recvExists()
}

func (p *THBaseServiceClient) sendExists(table []byte, tget *TGet)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("exists", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceExistsArgs{
  Table : table,
  Tget : tget,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvExists() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "exists" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "exists failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "exists failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error23 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error24 error
    error24, err = error23.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error24
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exists failed: invalid message type")
    return
  }
  result := THBaseServiceExistsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Test for the existence of columns in the table, as specified by the TGets.
// 
// This will return an array of booleans. Each value will be true if the related Get matches
// one or more keys, false if not.
// 
// Parameters:
//  - Table: the table to check on
//  - Tgets: a list of TGets to check for
func (p *THBaseServiceClient) ExistsAll(table []byte, tgets []*TGet) (r []bool, err error) {
  if err = p.sendExistsAll(table, tgets); err != nil { return }
  return p.recvExistsAll()
}

func (p *THBaseServiceClient) sendExistsAll(table []byte, tgets []*TGet)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("existsAll", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceExistsAllArgs{
  Table : table,
  Tgets : tgets,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvExistsAll() (value []bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "existsAll" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "existsAll failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "existsAll failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error25 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error26 error
    error26, err = error25.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error26
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "existsAll failed: invalid message type")
    return
  }
  result := THBaseServiceExistsAllResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Method for getting data from a row.
// 
// If the row cannot be found an empty Result is returned.
// This can be checked by the empty field of the TResult
// 
// @return the result
// 
// Parameters:
//  - Table: the table to get from
//  - Tget: the TGet to fetch
func (p *THBaseServiceClient) Get(table []byte, tget *TGet) (r *TResult_, err error) {
  if err = p.sendGet(table, tget); err != nil { return }
  return p.recvGet()
}

func (p *THBaseServiceClient) sendGet(table []byte, tget *TGet)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceGetArgs{
  Table : table,
  Tget : tget,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvGet() (value *TResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error27 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error28 error
    error28, err = error27.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error28
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := THBaseServiceGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Method for getting multiple rows.
// 
// If a row cannot be found there will be a null
// value in the result list for that TGet at the
// same position.
// 
// So the Results are in the same order as the TGets.
// 
// Parameters:
//  - Table: the table to get from
//  - Tgets: a list of TGets to fetch, the Result list
// will have the Results at corresponding positions
// or null if there was an error
func (p *THBaseServiceClient) GetMultiple(table []byte, tgets []*TGet) (r []*TResult_, err error) {
  if err = p.sendGetMultiple(table, tgets); err != nil { return }
  return p.recvGetMultiple()
}

func (p *THBaseServiceClient) sendGetMultiple(table []byte, tgets []*TGet)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getMultiple", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceGetMultipleArgs{
  Table : table,
  Tgets : tgets,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvGetMultiple() (value []*TResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getMultiple" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getMultiple failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMultiple failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error30 error
    error30, err = error29.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error30
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getMultiple failed: invalid message type")
    return
  }
  result := THBaseServiceGetMultipleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Commit a TPut to a table.
// 
// Parameters:
//  - Table: the table to put data in
//  - Tput: the TPut to put
func (p *THBaseServiceClient) Put(table []byte, tput *TPut) (err error) {
  if err = p.sendPut(table, tput); err != nil { return }
  return p.recvPut()
}

func (p *THBaseServiceClient) sendPut(table []byte, tput *TPut)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("put", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServicePutArgs{
  Table : table,
  Tput : tput,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvPut() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "put" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "put failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "put failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error32 error
    error32, err = error31.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error32
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "put failed: invalid message type")
    return
  }
  result := THBaseServicePutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  return
}

// Atomically checks if a row/family/qualifier value matches the expected
// value. If it does, it adds the TPut.
// 
// @return true if the new put was executed, false otherwise
// 
// Parameters:
//  - Table: to check in and put to
//  - Row: row to check
//  - Family: column family to check
//  - Qualifier: column qualifier to check
//  - Value: the expected value, if not provided the
// check is for the non-existence of the
// column in question
//  - Tput: the TPut to put if the check succeeds
func (p *THBaseServiceClient) CheckAndPut(table []byte, row []byte, family []byte, qualifier []byte, value []byte, tput *TPut) (r bool, err error) {
  if err = p.sendCheckAndPut(table, row, family, qualifier, value, tput); err != nil { return }
  return p.recvCheckAndPut()
}

func (p *THBaseServiceClient) sendCheckAndPut(table []byte, row []byte, family []byte, qualifier []byte, value []byte, tput *TPut)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("checkAndPut", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceCheckAndPutArgs{
  Table : table,
  Row : row,
  Family : family,
  Qualifier : qualifier,
  Value : value,
  Tput : tput,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvCheckAndPut() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "checkAndPut" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkAndPut failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkAndPut failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error34 error
    error34, err = error33.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error34
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkAndPut failed: invalid message type")
    return
  }
  result := THBaseServiceCheckAndPutResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Commit a List of Puts to the table.
// 
// Parameters:
//  - Table: the table to put data in
//  - Tputs: a list of TPuts to commit
func (p *THBaseServiceClient) PutMultiple(table []byte, tputs []*TPut) (err error) {
  if err = p.sendPutMultiple(table, tputs); err != nil { return }
  return p.recvPutMultiple()
}

func (p *THBaseServiceClient) sendPutMultiple(table []byte, tputs []*TPut)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("putMultiple", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServicePutMultipleArgs{
  Table : table,
  Tputs : tputs,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvPutMultiple() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "putMultiple" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "putMultiple failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "putMultiple failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error36 error
    error36, err = error35.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error36
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "putMultiple failed: invalid message type")
    return
  }
  result := THBaseServicePutMultipleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  return
}

// Deletes as specified by the TDelete.
// 
// Note: "delete" is a reserved keyword and cannot be used in Thrift
// thus the inconsistent naming scheme from the other functions.
// 
// Parameters:
//  - Table: the table to delete from
//  - Tdelete: the TDelete to delete
func (p *THBaseServiceClient) DeleteSingle(table []byte, tdelete *TDelete) (err error) {
  if err = p.sendDeleteSingle(table, tdelete); err != nil { return }
  return p.recvDeleteSingle()
}

func (p *THBaseServiceClient) sendDeleteSingle(table []byte, tdelete *TDelete)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteSingle", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceDeleteSingleArgs{
  Table : table,
  Tdelete : tdelete,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvDeleteSingle() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteSingle" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteSingle failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteSingle failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error38 error
    error38, err = error37.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error38
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteSingle failed: invalid message type")
    return
  }
  result := THBaseServiceDeleteSingleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  return
}

// Bulk commit a List of TDeletes to the table.
// 
// Throws a TIOError if any of the deletes fail.
// 
// Always returns an empty list for backwards compatibility.
// 
// Parameters:
//  - Table: the table to delete from
//  - Tdeletes: list of TDeletes to delete
func (p *THBaseServiceClient) DeleteMultiple(table []byte, tdeletes []*TDelete) (r []*TDelete, err error) {
  if err = p.sendDeleteMultiple(table, tdeletes); err != nil { return }
  return p.recvDeleteMultiple()
}

func (p *THBaseServiceClient) sendDeleteMultiple(table []byte, tdeletes []*TDelete)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deleteMultiple", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceDeleteMultipleArgs{
  Table : table,
  Tdeletes : tdeletes,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvDeleteMultiple() (value []*TDelete, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deleteMultiple" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteMultiple failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteMultiple failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error40 error
    error40, err = error39.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error40
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteMultiple failed: invalid message type")
    return
  }
  result := THBaseServiceDeleteMultipleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Atomically checks if a row/family/qualifier value matches the expected
// value. If it does, it adds the delete.
// 
// @return true if the new delete was executed, false otherwise
// 
// Parameters:
//  - Table: to check in and delete from
//  - Row: row to check
//  - Family: column family to check
//  - Qualifier: column qualifier to check
//  - Value: the expected value, if not provided the
// check is for the non-existence of the
// column in question
//  - Tdelete: the TDelete to execute if the check succeeds
func (p *THBaseServiceClient) CheckAndDelete(table []byte, row []byte, family []byte, qualifier []byte, value []byte, tdelete *TDelete) (r bool, err error) {
  if err = p.sendCheckAndDelete(table, row, family, qualifier, value, tdelete); err != nil { return }
  return p.recvCheckAndDelete()
}

func (p *THBaseServiceClient) sendCheckAndDelete(table []byte, row []byte, family []byte, qualifier []byte, value []byte, tdelete *TDelete)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("checkAndDelete", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceCheckAndDeleteArgs{
  Table : table,
  Row : row,
  Family : family,
  Qualifier : qualifier,
  Value : value,
  Tdelete : tdelete,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvCheckAndDelete() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "checkAndDelete" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkAndDelete failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkAndDelete failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error42 error
    error42, err = error41.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error42
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkAndDelete failed: invalid message type")
    return
  }
  result := THBaseServiceCheckAndDeleteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Table: the table to increment the value on
//  - Tincrement: the TIncrement to increment
func (p *THBaseServiceClient) Increment(table []byte, tincrement *TIncrement) (r *TResult_, err error) {
  if err = p.sendIncrement(table, tincrement); err != nil { return }
  return p.recvIncrement()
}

func (p *THBaseServiceClient) sendIncrement(table []byte, tincrement *TIncrement)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("increment", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceIncrementArgs{
  Table : table,
  Tincrement : tincrement,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvIncrement() (value *TResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "increment" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "increment failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "increment failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error44 error
    error44, err = error43.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error44
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "increment failed: invalid message type")
    return
  }
  result := THBaseServiceIncrementResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Table: the table to append the value on
//  - Tappend: the TAppend to append
func (p *THBaseServiceClient) Append(table []byte, tappend *TAppend) (r *TResult_, err error) {
  if err = p.sendAppend(table, tappend); err != nil { return }
  return p.recvAppend()
}

func (p *THBaseServiceClient) sendAppend(table []byte, tappend *TAppend)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("append", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceAppendArgs{
  Table : table,
  Tappend : tappend,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvAppend() (value *TResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "append" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "append failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "append failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error46 error
    error46, err = error45.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error46
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "append failed: invalid message type")
    return
  }
  result := THBaseServiceAppendResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Get a Scanner for the provided TScan object.
// 
// @return Scanner Id to be used with other scanner procedures
// 
// Parameters:
//  - Table: the table to get the Scanner for
//  - Tscan: the scan object to get a Scanner for
func (p *THBaseServiceClient) OpenScanner(table []byte, tscan *TScan) (r int32, err error) {
  if err = p.sendOpenScanner(table, tscan); err != nil { return }
  return p.recvOpenScanner()
}

func (p *THBaseServiceClient) sendOpenScanner(table []byte, tscan *TScan)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("openScanner", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceOpenScannerArgs{
  Table : table,
  Tscan : tscan,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvOpenScanner() (value int32, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "openScanner" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "openScanner failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "openScanner failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error48 error
    error48, err = error47.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error48
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "openScanner failed: invalid message type")
    return
  }
  result := THBaseServiceOpenScannerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Grabs multiple rows from a Scanner.
// 
// @return Between zero and numRows TResults
// 
// Parameters:
//  - ScannerId: the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
//  - NumRows: number of rows to return
func (p *THBaseServiceClient) GetScannerRows(scannerId int32, numRows int32) (r []*TResult_, err error) {
  if err = p.sendGetScannerRows(scannerId, numRows); err != nil { return }
  return p.recvGetScannerRows()
}

func (p *THBaseServiceClient) sendGetScannerRows(scannerId int32, numRows int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getScannerRows", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceGetScannerRowsArgs{
  ScannerId : scannerId,
  NumRows : numRows,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvGetScannerRows() (value []*TResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getScannerRows" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getScannerRows failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getScannerRows failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error50 error
    error50, err = error49.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error50
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getScannerRows failed: invalid message type")
    return
  }
  result := THBaseServiceGetScannerRowsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  } else   if result.Ia != nil {
    err = result.Ia
    return 
  }
  value = result.GetSuccess()
  return
}

// Closes the scanner. Should be called to free server side resources timely.
// Typically close once the scanner is not needed anymore, i.e. after looping
// over it to get all the required rows.
// 
// Parameters:
//  - ScannerId: the Id of the Scanner to close *
func (p *THBaseServiceClient) CloseScanner(scannerId int32) (err error) {
  if err = p.sendCloseScanner(scannerId); err != nil { return }
  return p.recvCloseScanner()
}

func (p *THBaseServiceClient) sendCloseScanner(scannerId int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("closeScanner", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceCloseScannerArgs{
  ScannerId : scannerId,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvCloseScanner() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "closeScanner" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "closeScanner failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "closeScanner failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error52 error
    error52, err = error51.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error52
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "closeScanner failed: invalid message type")
    return
  }
  result := THBaseServiceCloseScannerResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  } else   if result.Ia != nil {
    err = result.Ia
    return 
  }
  return
}

// mutateRow performs multiple mutations atomically on a single row.
// 
// Parameters:
//  - Table: table to apply the mutations
//  - TrowMutations: mutations to apply
func (p *THBaseServiceClient) MutateRow(table []byte, trowMutations *TRowMutations) (err error) {
  if err = p.sendMutateRow(table, trowMutations); err != nil { return }
  return p.recvMutateRow()
}

func (p *THBaseServiceClient) sendMutateRow(table []byte, trowMutations *TRowMutations)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("mutateRow", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceMutateRowArgs{
  Table : table,
  TrowMutations : trowMutations,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvMutateRow() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "mutateRow" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mutateRow failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mutateRow failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error54 error
    error54, err = error53.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error54
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mutateRow failed: invalid message type")
    return
  }
  result := THBaseServiceMutateRowResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  return
}

// Get results for the provided TScan object.
// This helper function opens a scanner, get the results and close the scanner.
// 
// @return between zero and numRows TResults
// 
// Parameters:
//  - Table: the table to get the Scanner for
//  - Tscan: the scan object to get a Scanner for
//  - NumRows: number of rows to return
func (p *THBaseServiceClient) GetScannerResults(table []byte, tscan *TScan, numRows int32) (r []*TResult_, err error) {
  if err = p.sendGetScannerResults(table, tscan, numRows); err != nil { return }
  return p.recvGetScannerResults()
}

func (p *THBaseServiceClient) sendGetScannerResults(table []byte, tscan *TScan, numRows int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getScannerResults", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceGetScannerResultsArgs{
  Table : table,
  Tscan : tscan,
  NumRows : numRows,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvGetScannerResults() (value []*TResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getScannerResults" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getScannerResults failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getScannerResults failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error56 error
    error56, err = error55.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error56
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getScannerResults failed: invalid message type")
    return
  }
  result := THBaseServiceGetScannerResultsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Given a table and a row get the location of the region that
// would contain the given row key.
// 
// reload = true means the cache will be cleared and the location
// will be fetched from meta.
// 
// Parameters:
//  - Table
//  - Row
//  - Reload
func (p *THBaseServiceClient) GetRegionLocation(table []byte, row []byte, reload bool) (r *THRegionLocation, err error) {
  if err = p.sendGetRegionLocation(table, row, reload); err != nil { return }
  return p.recvGetRegionLocation()
}

func (p *THBaseServiceClient) sendGetRegionLocation(table []byte, row []byte, reload bool)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getRegionLocation", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceGetRegionLocationArgs{
  Table : table,
  Row : row,
  Reload : reload,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvGetRegionLocation() (value *THRegionLocation, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getRegionLocation" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRegionLocation failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRegionLocation failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error58 error
    error58, err = error57.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error58
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRegionLocation failed: invalid message type")
    return
  }
  result := THBaseServiceGetRegionLocationResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Get all of the region locations for a given table.
// 
// 
// Parameters:
//  - Table
func (p *THBaseServiceClient) GetAllRegionLocations(table []byte) (r []*THRegionLocation, err error) {
  if err = p.sendGetAllRegionLocations(table); err != nil { return }
  return p.recvGetAllRegionLocations()
}

func (p *THBaseServiceClient) sendGetAllRegionLocations(table []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getAllRegionLocations", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceGetAllRegionLocationsArgs{
  Table : table,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvGetAllRegionLocations() (value []*THRegionLocation, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getAllRegionLocations" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllRegionLocations failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllRegionLocations failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error60 error
    error60, err = error59.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error60
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllRegionLocations failed: invalid message type")
    return
  }
  result := THBaseServiceGetAllRegionLocationsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}

// Atomically checks if a row/family/qualifier value matches the expected
// value. If it does, it mutates the row.
// 
// @return true if the row was mutated, false otherwise
// 
// Parameters:
//  - Table: to check in and delete from
//  - Row: row to check
//  - Family: column family to check
//  - Qualifier: column qualifier to check
//  - CompareOp: comparison to make on the value
//  - Value: the expected value to be compared against, if not provided the
// check is for the non-existence of the column in question
//  - RowMutations: row mutations to execute if the value matches
func (p *THBaseServiceClient) CheckAndMutate(table []byte, row []byte, family []byte, qualifier []byte, compareOp TCompareOp, value []byte, rowMutations *TRowMutations) (r bool, err error) {
  if err = p.sendCheckAndMutate(table, row, family, qualifier, compareOp, value, rowMutations); err != nil { return }
  return p.recvCheckAndMutate()
}

func (p *THBaseServiceClient) sendCheckAndMutate(table []byte, row []byte, family []byte, qualifier []byte, compareOp TCompareOp, value []byte, rowMutations *TRowMutations)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("checkAndMutate", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := THBaseServiceCheckAndMutateArgs{
  Table : table,
  Row : row,
  Family : family,
  Qualifier : qualifier,
  CompareOp : compareOp,
  Value : value,
  RowMutations : rowMutations,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *THBaseServiceClient) recvCheckAndMutate() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "checkAndMutate" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkAndMutate failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkAndMutate failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error62 error
    error62, err = error61.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error62
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkAndMutate failed: invalid message type")
    return
  }
  result := THBaseServiceCheckAndMutateResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Io != nil {
    err = result.Io
    return 
  }
  value = result.GetSuccess()
  return
}


type THBaseServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler THBaseService
}

func (p *THBaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *THBaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *THBaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTHBaseServiceProcessor(handler THBaseService) *THBaseServiceProcessor {

  self63 := &THBaseServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self63.processorMap["exists"] = &tHBaseServiceProcessorExists{handler:handler}
  self63.processorMap["existsAll"] = &tHBaseServiceProcessorExistsAll{handler:handler}
  self63.processorMap["get"] = &tHBaseServiceProcessorGet{handler:handler}
  self63.processorMap["getMultiple"] = &tHBaseServiceProcessorGetMultiple{handler:handler}
  self63.processorMap["put"] = &tHBaseServiceProcessorPut{handler:handler}
  self63.processorMap["checkAndPut"] = &tHBaseServiceProcessorCheckAndPut{handler:handler}
  self63.processorMap["putMultiple"] = &tHBaseServiceProcessorPutMultiple{handler:handler}
  self63.processorMap["deleteSingle"] = &tHBaseServiceProcessorDeleteSingle{handler:handler}
  self63.processorMap["deleteMultiple"] = &tHBaseServiceProcessorDeleteMultiple{handler:handler}
  self63.processorMap["checkAndDelete"] = &tHBaseServiceProcessorCheckAndDelete{handler:handler}
  self63.processorMap["increment"] = &tHBaseServiceProcessorIncrement{handler:handler}
  self63.processorMap["append"] = &tHBaseServiceProcessorAppend{handler:handler}
  self63.processorMap["openScanner"] = &tHBaseServiceProcessorOpenScanner{handler:handler}
  self63.processorMap["getScannerRows"] = &tHBaseServiceProcessorGetScannerRows{handler:handler}
  self63.processorMap["closeScanner"] = &tHBaseServiceProcessorCloseScanner{handler:handler}
  self63.processorMap["mutateRow"] = &tHBaseServiceProcessorMutateRow{handler:handler}
  self63.processorMap["getScannerResults"] = &tHBaseServiceProcessorGetScannerResults{handler:handler}
  self63.processorMap["getRegionLocation"] = &tHBaseServiceProcessorGetRegionLocation{handler:handler}
  self63.processorMap["getAllRegionLocations"] = &tHBaseServiceProcessorGetAllRegionLocations{handler:handler}
  self63.processorMap["checkAndMutate"] = &tHBaseServiceProcessorCheckAndMutate{handler:handler}
return self63
}

func (p *THBaseServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x64 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x64.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x64

}

type tHBaseServiceProcessorExists struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorExists) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceExistsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("exists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceExistsResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.Exists(args.Table, args.Tget); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exists: " + err2.Error())
    oprot.WriteMessageBegin("exists", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("exists", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorExistsAll struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorExistsAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceExistsAllArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("existsAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceExistsAllResult{}
var retval []bool
  var err2 error
  if retval, err2 = p.handler.ExistsAll(args.Table, args.Tgets); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existsAll: " + err2.Error())
    oprot.WriteMessageBegin("existsAll", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("existsAll", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGet struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceGetResult{}
var retval *TResult_
  var err2 error
  if retval, err2 = p.handler.Get(args.Table, args.Tget); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetMultiple struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorGetMultiple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceGetMultipleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceGetMultipleResult{}
var retval []*TResult_
  var err2 error
  if retval, err2 = p.handler.GetMultiple(args.Table, args.Tgets); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMultiple: " + err2.Error())
    oprot.WriteMessageBegin("getMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMultiple", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorPut struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServicePutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServicePutResult{}
  var err2 error
  if err2 = p.handler.Put(args.Table, args.Tput); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin("put", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("put", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCheckAndPut struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorCheckAndPut) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceCheckAndPutArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkAndPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceCheckAndPutResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CheckAndPut(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tput); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAndPut: " + err2.Error())
    oprot.WriteMessageBegin("checkAndPut", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("checkAndPut", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorPutMultiple struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorPutMultiple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServicePutMultipleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServicePutMultipleResult{}
  var err2 error
  if err2 = p.handler.PutMultiple(args.Table, args.Tputs); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putMultiple: " + err2.Error())
    oprot.WriteMessageBegin("putMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("putMultiple", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorDeleteSingle struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorDeleteSingle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceDeleteSingleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteSingle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceDeleteSingleResult{}
  var err2 error
  if err2 = p.handler.DeleteSingle(args.Table, args.Tdelete); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSingle: " + err2.Error())
    oprot.WriteMessageBegin("deleteSingle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("deleteSingle", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorDeleteMultiple struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorDeleteMultiple) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceDeleteMultipleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceDeleteMultipleResult{}
var retval []*TDelete
  var err2 error
  if retval, err2 = p.handler.DeleteMultiple(args.Table, args.Tdeletes); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteMultiple: " + err2.Error())
    oprot.WriteMessageBegin("deleteMultiple", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("deleteMultiple", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCheckAndDelete struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorCheckAndDelete) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceCheckAndDeleteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkAndDelete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceCheckAndDeleteResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CheckAndDelete(args.Table, args.Row, args.Family, args.Qualifier, args.Value, args.Tdelete); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAndDelete: " + err2.Error())
    oprot.WriteMessageBegin("checkAndDelete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("checkAndDelete", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorIncrement struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceIncrementArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceIncrementResult{}
var retval *TResult_
  var err2 error
  if retval, err2 = p.handler.Increment(args.Table, args.Tincrement); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing increment: " + err2.Error())
    oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("increment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorAppend struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorAppend) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceAppendArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceAppendResult{}
var retval *TResult_
  var err2 error
  if retval, err2 = p.handler.Append(args.Table, args.Tappend); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append: " + err2.Error())
    oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("append", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorOpenScanner struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorOpenScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceOpenScannerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("openScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceOpenScannerResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.OpenScanner(args.Table, args.Tscan); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openScanner: " + err2.Error())
    oprot.WriteMessageBegin("openScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("openScanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetScannerRows struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorGetScannerRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceGetScannerRowsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getScannerRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceGetScannerRowsResult{}
var retval []*TResult_
  var err2 error
  if retval, err2 = p.handler.GetScannerRows(args.ScannerId, args.NumRows); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    case *TIllegalArgument:
  result.Ia = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getScannerRows: " + err2.Error())
    oprot.WriteMessageBegin("getScannerRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getScannerRows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCloseScanner struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorCloseScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceCloseScannerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("closeScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceCloseScannerResult{}
  var err2 error
  if err2 = p.handler.CloseScanner(args.ScannerId); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    case *TIllegalArgument:
  result.Ia = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeScanner: " + err2.Error())
    oprot.WriteMessageBegin("closeScanner", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("closeScanner", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorMutateRow struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorMutateRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceMutateRowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceMutateRowResult{}
  var err2 error
  if err2 = p.handler.MutateRow(args.Table, args.TrowMutations); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: " + err2.Error())
    oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetScannerResults struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorGetScannerResults) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceGetScannerResultsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getScannerResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceGetScannerResultsResult{}
var retval []*TResult_
  var err2 error
  if retval, err2 = p.handler.GetScannerResults(args.Table, args.Tscan, args.NumRows); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getScannerResults: " + err2.Error())
    oprot.WriteMessageBegin("getScannerResults", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getScannerResults", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetRegionLocation struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorGetRegionLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceGetRegionLocationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRegionLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceGetRegionLocationResult{}
var retval *THRegionLocation
  var err2 error
  if retval, err2 = p.handler.GetRegionLocation(args.Table, args.Row, args.Reload); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegionLocation: " + err2.Error())
    oprot.WriteMessageBegin("getRegionLocation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRegionLocation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorGetAllRegionLocations struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorGetAllRegionLocations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceGetAllRegionLocationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllRegionLocations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceGetAllRegionLocationsResult{}
var retval []*THRegionLocation
  var err2 error
  if retval, err2 = p.handler.GetAllRegionLocations(args.Table); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllRegionLocations: " + err2.Error())
    oprot.WriteMessageBegin("getAllRegionLocations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllRegionLocations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tHBaseServiceProcessorCheckAndMutate struct {
  handler THBaseService
}

func (p *tHBaseServiceProcessorCheckAndMutate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := THBaseServiceCheckAndMutateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkAndMutate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := THBaseServiceCheckAndMutateResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CheckAndMutate(args.Table, args.Row, args.Family, args.Qualifier, args.CompareOp, args.Value, args.RowMutations); err2 != nil {
  switch v := err2.(type) {
    case *TIOError:
  result.Io = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAndMutate: " + err2.Error())
    oprot.WriteMessageBegin("checkAndMutate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("checkAndMutate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Table: the table to check on
//  - Tget: the TGet to check for
type THBaseServiceExistsArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tget *TGet `thrift:"tget,2,required" db:"tget" json:"tget"`
}

func NewTHBaseServiceExistsArgs() *THBaseServiceExistsArgs {
  return &THBaseServiceExistsArgs{}
}


func (p *THBaseServiceExistsArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceExistsArgs_Tget_DEFAULT *TGet
func (p *THBaseServiceExistsArgs) GetTget() *TGet {
  if !p.IsSetTget() {
    return THBaseServiceExistsArgs_Tget_DEFAULT
  }
return p.Tget
}
func (p *THBaseServiceExistsArgs) IsSetTget() bool {
  return p.Tget != nil
}

func (p *THBaseServiceExistsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTget bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTget = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTget{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tget is not set"));
  }
  return nil
}

func (p *THBaseServiceExistsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceExistsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tget = &TGet{}
  if err := p.Tget.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tget), err)
  }
  return nil
}

func (p *THBaseServiceExistsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("exists_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceExistsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceExistsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tget", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tget: ", p), err) }
  if err := p.Tget.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tget), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tget: ", p), err) }
  return err
}

func (p *THBaseServiceExistsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceExistsResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceExistsResult() *THBaseServiceExistsResult {
  return &THBaseServiceExistsResult{}
}

var THBaseServiceExistsResult_Success_DEFAULT bool
func (p *THBaseServiceExistsResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return THBaseServiceExistsResult_Success_DEFAULT
  }
return *p.Success
}
var THBaseServiceExistsResult_Io_DEFAULT *TIOError
func (p *THBaseServiceExistsResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceExistsResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceExistsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceExistsResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceExistsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceExistsResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *THBaseServiceExistsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceExistsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("exists_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceExistsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceExistsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceExistsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceExistsResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to check on
//  - Tgets: a list of TGets to check for
type THBaseServiceExistsAllArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tgets []*TGet `thrift:"tgets,2,required" db:"tgets" json:"tgets"`
}

func NewTHBaseServiceExistsAllArgs() *THBaseServiceExistsAllArgs {
  return &THBaseServiceExistsAllArgs{}
}


func (p *THBaseServiceExistsAllArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceExistsAllArgs) GetTgets() []*TGet {
  return p.Tgets
}
func (p *THBaseServiceExistsAllArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTgets bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTgets = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTgets{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tgets is not set"));
  }
  return nil
}

func (p *THBaseServiceExistsAllArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceExistsAllArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TGet, 0, size)
  p.Tgets =  tSlice
  for i := 0; i < size; i ++ {
    _elem65 := &TGet{}
    if err := _elem65.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem65), err)
    }
    p.Tgets = append(p.Tgets, _elem65)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceExistsAllArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("existsAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceExistsAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceExistsAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tgets", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tgets: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tgets)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tgets {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tgets: ", p), err) }
  return err
}

func (p *THBaseServiceExistsAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceExistsAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceExistsAllResult struct {
  Success []bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceExistsAllResult() *THBaseServiceExistsAllResult {
  return &THBaseServiceExistsAllResult{}
}

var THBaseServiceExistsAllResult_Success_DEFAULT []bool

func (p *THBaseServiceExistsAllResult) GetSuccess() []bool {
  return p.Success
}
var THBaseServiceExistsAllResult_Io_DEFAULT *TIOError
func (p *THBaseServiceExistsAllResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceExistsAllResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceExistsAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceExistsAllResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceExistsAllResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceExistsAllResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem66 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem66 = v
}
    p.Success = append(p.Success, _elem66)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceExistsAllResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceExistsAllResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("existsAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceExistsAllResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceExistsAllResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceExistsAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceExistsAllResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to get from
//  - Tget: the TGet to fetch
type THBaseServiceGetArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tget *TGet `thrift:"tget,2,required" db:"tget" json:"tget"`
}

func NewTHBaseServiceGetArgs() *THBaseServiceGetArgs {
  return &THBaseServiceGetArgs{}
}


func (p *THBaseServiceGetArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceGetArgs_Tget_DEFAULT *TGet
func (p *THBaseServiceGetArgs) GetTget() *TGet {
  if !p.IsSetTget() {
    return THBaseServiceGetArgs_Tget_DEFAULT
  }
return p.Tget
}
func (p *THBaseServiceGetArgs) IsSetTget() bool {
  return p.Tget != nil
}

func (p *THBaseServiceGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTget bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTget = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTget{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tget is not set"));
  }
  return nil
}

func (p *THBaseServiceGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceGetArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tget = &TGet{}
  if err := p.Tget.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tget), err)
  }
  return nil
}

func (p *THBaseServiceGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tget", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tget: ", p), err) }
  if err := p.Tget.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tget), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tget: ", p), err) }
  return err
}

func (p *THBaseServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceGetResult struct {
  Success *TResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceGetResult() *THBaseServiceGetResult {
  return &THBaseServiceGetResult{}
}

var THBaseServiceGetResult_Success_DEFAULT *TResult_
func (p *THBaseServiceGetResult) GetSuccess() *TResult_ {
  if !p.IsSetSuccess() {
    return THBaseServiceGetResult_Success_DEFAULT
  }
return p.Success
}
var THBaseServiceGetResult_Io_DEFAULT *TIOError
func (p *THBaseServiceGetResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceGetResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceGetResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceGetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *THBaseServiceGetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to get from
//  - Tgets: a list of TGets to fetch, the Result list
// will have the Results at corresponding positions
// or null if there was an error
type THBaseServiceGetMultipleArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tgets []*TGet `thrift:"tgets,2,required" db:"tgets" json:"tgets"`
}

func NewTHBaseServiceGetMultipleArgs() *THBaseServiceGetMultipleArgs {
  return &THBaseServiceGetMultipleArgs{}
}


func (p *THBaseServiceGetMultipleArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceGetMultipleArgs) GetTgets() []*TGet {
  return p.Tgets
}
func (p *THBaseServiceGetMultipleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTgets bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTgets = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTgets{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tgets is not set"));
  }
  return nil
}

func (p *THBaseServiceGetMultipleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceGetMultipleArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TGet, 0, size)
  p.Tgets =  tSlice
  for i := 0; i < size; i ++ {
    _elem67 := &TGet{}
    if err := _elem67.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem67), err)
    }
    p.Tgets = append(p.Tgets, _elem67)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceGetMultipleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMultiple_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetMultipleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceGetMultipleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tgets", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tgets: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tgets)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tgets {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tgets: ", p), err) }
  return err
}

func (p *THBaseServiceGetMultipleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetMultipleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceGetMultipleResult struct {
  Success []*TResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceGetMultipleResult() *THBaseServiceGetMultipleResult {
  return &THBaseServiceGetMultipleResult{}
}

var THBaseServiceGetMultipleResult_Success_DEFAULT []*TResult_

func (p *THBaseServiceGetMultipleResult) GetSuccess() []*TResult_ {
  return p.Success
}
var THBaseServiceGetMultipleResult_Io_DEFAULT *TIOError
func (p *THBaseServiceGetMultipleResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceGetMultipleResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceGetMultipleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceGetMultipleResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceGetMultipleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceGetMultipleResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem68 := &TResult_{}
    if err := _elem68.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem68), err)
    }
    p.Success = append(p.Success, _elem68)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceGetMultipleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceGetMultipleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMultiple_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetMultipleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetMultipleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetMultipleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetMultipleResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to put data in
//  - Tput: the TPut to put
type THBaseServicePutArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tput *TPut `thrift:"tput,2,required" db:"tput" json:"tput"`
}

func NewTHBaseServicePutArgs() *THBaseServicePutArgs {
  return &THBaseServicePutArgs{}
}


func (p *THBaseServicePutArgs) GetTable() []byte {
  return p.Table
}
var THBaseServicePutArgs_Tput_DEFAULT *TPut
func (p *THBaseServicePutArgs) GetTput() *TPut {
  if !p.IsSetTput() {
    return THBaseServicePutArgs_Tput_DEFAULT
  }
return p.Tput
}
func (p *THBaseServicePutArgs) IsSetTput() bool {
  return p.Tput != nil
}

func (p *THBaseServicePutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTput bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTput = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTput{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tput is not set"));
  }
  return nil
}

func (p *THBaseServicePutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServicePutArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tput = &TPut{}
  if err := p.Tput.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tput), err)
  }
  return nil
}

func (p *THBaseServicePutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServicePutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServicePutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tput", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tput: ", p), err) }
  if err := p.Tput.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tput), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tput: ", p), err) }
  return err
}

func (p *THBaseServicePutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Io
type THBaseServicePutResult struct {
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServicePutResult() *THBaseServicePutResult {
  return &THBaseServicePutResult{}
}

var THBaseServicePutResult_Io_DEFAULT *TIOError
func (p *THBaseServicePutResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServicePutResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServicePutResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServicePutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServicePutResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServicePutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServicePutResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServicePutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServicePutResult(%+v)", *p)
}

// Attributes:
//  - Table: to check in and put to
//  - Row: row to check
//  - Family: column family to check
//  - Qualifier: column qualifier to check
//  - Value: the expected value, if not provided the
// check is for the non-existence of the
// column in question
//  - Tput: the TPut to put if the check succeeds
type THBaseServiceCheckAndPutArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Row []byte `thrift:"row,2,required" db:"row" json:"row"`
  Family []byte `thrift:"family,3,required" db:"family" json:"family"`
  Qualifier []byte `thrift:"qualifier,4,required" db:"qualifier" json:"qualifier"`
  Value []byte `thrift:"value,5" db:"value" json:"value"`
  Tput *TPut `thrift:"tput,6,required" db:"tput" json:"tput"`
}

func NewTHBaseServiceCheckAndPutArgs() *THBaseServiceCheckAndPutArgs {
  return &THBaseServiceCheckAndPutArgs{}
}


func (p *THBaseServiceCheckAndPutArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceCheckAndPutArgs) GetRow() []byte {
  return p.Row
}

func (p *THBaseServiceCheckAndPutArgs) GetFamily() []byte {
  return p.Family
}

func (p *THBaseServiceCheckAndPutArgs) GetQualifier() []byte {
  return p.Qualifier
}

func (p *THBaseServiceCheckAndPutArgs) GetValue() []byte {
  return p.Value
}
var THBaseServiceCheckAndPutArgs_Tput_DEFAULT *TPut
func (p *THBaseServiceCheckAndPutArgs) GetTput() *TPut {
  if !p.IsSetTput() {
    return THBaseServiceCheckAndPutArgs_Tput_DEFAULT
  }
return p.Tput
}
func (p *THBaseServiceCheckAndPutArgs) IsSetTput() bool {
  return p.Tput != nil
}

func (p *THBaseServiceCheckAndPutArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetRow bool = false;
  var issetFamily bool = false;
  var issetQualifier bool = false;
  var issetTput bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRow = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetFamily = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetQualifier = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetTput = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetFamily{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Family is not set"));
  }
  if !issetQualifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Qualifier is not set"));
  }
  if !issetTput{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tput is not set"));
  }
  return nil
}

func (p *THBaseServiceCheckAndPutArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceCheckAndPutArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *THBaseServiceCheckAndPutArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *THBaseServiceCheckAndPutArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Qualifier = v
}
  return nil
}

func (p *THBaseServiceCheckAndPutArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *THBaseServiceCheckAndPutArgs)  ReadField6(iprot thrift.TProtocol) error {
  p.Tput = &TPut{}
  if err := p.Tput.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tput), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndPutArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAndPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCheckAndPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:family: ", p), err) }
  if err := oprot.WriteBinary(p.Family); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:family: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndPutArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:qualifier: ", p), err) }
  if err := oprot.WriteBinary(p.Qualifier); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qualifier (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:qualifier: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndPutArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:value: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndPutArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tput", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tput: ", p), err) }
  if err := p.Tput.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tput), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tput: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCheckAndPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceCheckAndPutResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceCheckAndPutResult() *THBaseServiceCheckAndPutResult {
  return &THBaseServiceCheckAndPutResult{}
}

var THBaseServiceCheckAndPutResult_Success_DEFAULT bool
func (p *THBaseServiceCheckAndPutResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return THBaseServiceCheckAndPutResult_Success_DEFAULT
  }
return *p.Success
}
var THBaseServiceCheckAndPutResult_Io_DEFAULT *TIOError
func (p *THBaseServiceCheckAndPutResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceCheckAndPutResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceCheckAndPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceCheckAndPutResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceCheckAndPutResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndPutResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *THBaseServiceCheckAndPutResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndPutResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAndPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCheckAndPutResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCheckAndPutResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCheckAndPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCheckAndPutResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to put data in
//  - Tputs: a list of TPuts to commit
type THBaseServicePutMultipleArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tputs []*TPut `thrift:"tputs,2,required" db:"tputs" json:"tputs"`
}

func NewTHBaseServicePutMultipleArgs() *THBaseServicePutMultipleArgs {
  return &THBaseServicePutMultipleArgs{}
}


func (p *THBaseServicePutMultipleArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServicePutMultipleArgs) GetTputs() []*TPut {
  return p.Tputs
}
func (p *THBaseServicePutMultipleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTputs bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTputs = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTputs{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tputs is not set"));
  }
  return nil
}

func (p *THBaseServicePutMultipleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServicePutMultipleArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPut, 0, size)
  p.Tputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem69 := &TPut{}
    if err := _elem69.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem69), err)
    }
    p.Tputs = append(p.Tputs, _elem69)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServicePutMultipleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putMultiple_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServicePutMultipleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServicePutMultipleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tputs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tputs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tputs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tputs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tputs: ", p), err) }
  return err
}

func (p *THBaseServicePutMultipleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServicePutMultipleArgs(%+v)", *p)
}

// Attributes:
//  - Io
type THBaseServicePutMultipleResult struct {
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServicePutMultipleResult() *THBaseServicePutMultipleResult {
  return &THBaseServicePutMultipleResult{}
}

var THBaseServicePutMultipleResult_Io_DEFAULT *TIOError
func (p *THBaseServicePutMultipleResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServicePutMultipleResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServicePutMultipleResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServicePutMultipleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServicePutMultipleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServicePutMultipleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putMultiple_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServicePutMultipleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServicePutMultipleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServicePutMultipleResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to delete from
//  - Tdelete: the TDelete to delete
type THBaseServiceDeleteSingleArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tdelete *TDelete `thrift:"tdelete,2,required" db:"tdelete" json:"tdelete"`
}

func NewTHBaseServiceDeleteSingleArgs() *THBaseServiceDeleteSingleArgs {
  return &THBaseServiceDeleteSingleArgs{}
}


func (p *THBaseServiceDeleteSingleArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceDeleteSingleArgs_Tdelete_DEFAULT *TDelete
func (p *THBaseServiceDeleteSingleArgs) GetTdelete() *TDelete {
  if !p.IsSetTdelete() {
    return THBaseServiceDeleteSingleArgs_Tdelete_DEFAULT
  }
return p.Tdelete
}
func (p *THBaseServiceDeleteSingleArgs) IsSetTdelete() bool {
  return p.Tdelete != nil
}

func (p *THBaseServiceDeleteSingleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTdelete bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTdelete = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTdelete{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tdelete is not set"));
  }
  return nil
}

func (p *THBaseServiceDeleteSingleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceDeleteSingleArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tdelete = &TDelete{
  DeleteType:   1,
}
  if err := p.Tdelete.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tdelete), err)
  }
  return nil
}

func (p *THBaseServiceDeleteSingleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteSingle_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceDeleteSingleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceDeleteSingleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tdelete", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tdelete: ", p), err) }
  if err := p.Tdelete.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tdelete), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tdelete: ", p), err) }
  return err
}

func (p *THBaseServiceDeleteSingleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceDeleteSingleArgs(%+v)", *p)
}

// Attributes:
//  - Io
type THBaseServiceDeleteSingleResult struct {
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceDeleteSingleResult() *THBaseServiceDeleteSingleResult {
  return &THBaseServiceDeleteSingleResult{}
}

var THBaseServiceDeleteSingleResult_Io_DEFAULT *TIOError
func (p *THBaseServiceDeleteSingleResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceDeleteSingleResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceDeleteSingleResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceDeleteSingleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceDeleteSingleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceDeleteSingleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteSingle_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceDeleteSingleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceDeleteSingleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceDeleteSingleResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to delete from
//  - Tdeletes: list of TDeletes to delete
type THBaseServiceDeleteMultipleArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tdeletes []*TDelete `thrift:"tdeletes,2,required" db:"tdeletes" json:"tdeletes"`
}

func NewTHBaseServiceDeleteMultipleArgs() *THBaseServiceDeleteMultipleArgs {
  return &THBaseServiceDeleteMultipleArgs{}
}


func (p *THBaseServiceDeleteMultipleArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceDeleteMultipleArgs) GetTdeletes() []*TDelete {
  return p.Tdeletes
}
func (p *THBaseServiceDeleteMultipleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTdeletes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTdeletes = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTdeletes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tdeletes is not set"));
  }
  return nil
}

func (p *THBaseServiceDeleteMultipleArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceDeleteMultipleArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDelete, 0, size)
  p.Tdeletes =  tSlice
  for i := 0; i < size; i ++ {
    _elem70 := &TDelete{
    DeleteType:     1,
}
    if err := _elem70.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem70), err)
    }
    p.Tdeletes = append(p.Tdeletes, _elem70)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceDeleteMultipleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteMultiple_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceDeleteMultipleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceDeleteMultipleArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tdeletes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tdeletes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tdeletes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tdeletes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tdeletes: ", p), err) }
  return err
}

func (p *THBaseServiceDeleteMultipleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceDeleteMultipleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceDeleteMultipleResult struct {
  Success []*TDelete `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceDeleteMultipleResult() *THBaseServiceDeleteMultipleResult {
  return &THBaseServiceDeleteMultipleResult{}
}

var THBaseServiceDeleteMultipleResult_Success_DEFAULT []*TDelete

func (p *THBaseServiceDeleteMultipleResult) GetSuccess() []*TDelete {
  return p.Success
}
var THBaseServiceDeleteMultipleResult_Io_DEFAULT *TIOError
func (p *THBaseServiceDeleteMultipleResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceDeleteMultipleResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceDeleteMultipleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceDeleteMultipleResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceDeleteMultipleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceDeleteMultipleResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TDelete, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem71 := &TDelete{
    DeleteType:     1,
}
    if err := _elem71.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem71), err)
    }
    p.Success = append(p.Success, _elem71)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceDeleteMultipleResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceDeleteMultipleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteMultiple_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceDeleteMultipleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceDeleteMultipleResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceDeleteMultipleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceDeleteMultipleResult(%+v)", *p)
}

// Attributes:
//  - Table: to check in and delete from
//  - Row: row to check
//  - Family: column family to check
//  - Qualifier: column qualifier to check
//  - Value: the expected value, if not provided the
// check is for the non-existence of the
// column in question
//  - Tdelete: the TDelete to execute if the check succeeds
type THBaseServiceCheckAndDeleteArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Row []byte `thrift:"row,2,required" db:"row" json:"row"`
  Family []byte `thrift:"family,3,required" db:"family" json:"family"`
  Qualifier []byte `thrift:"qualifier,4,required" db:"qualifier" json:"qualifier"`
  Value []byte `thrift:"value,5" db:"value" json:"value"`
  Tdelete *TDelete `thrift:"tdelete,6,required" db:"tdelete" json:"tdelete"`
}

func NewTHBaseServiceCheckAndDeleteArgs() *THBaseServiceCheckAndDeleteArgs {
  return &THBaseServiceCheckAndDeleteArgs{}
}


func (p *THBaseServiceCheckAndDeleteArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceCheckAndDeleteArgs) GetRow() []byte {
  return p.Row
}

func (p *THBaseServiceCheckAndDeleteArgs) GetFamily() []byte {
  return p.Family
}

func (p *THBaseServiceCheckAndDeleteArgs) GetQualifier() []byte {
  return p.Qualifier
}

func (p *THBaseServiceCheckAndDeleteArgs) GetValue() []byte {
  return p.Value
}
var THBaseServiceCheckAndDeleteArgs_Tdelete_DEFAULT *TDelete
func (p *THBaseServiceCheckAndDeleteArgs) GetTdelete() *TDelete {
  if !p.IsSetTdelete() {
    return THBaseServiceCheckAndDeleteArgs_Tdelete_DEFAULT
  }
return p.Tdelete
}
func (p *THBaseServiceCheckAndDeleteArgs) IsSetTdelete() bool {
  return p.Tdelete != nil
}

func (p *THBaseServiceCheckAndDeleteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetRow bool = false;
  var issetFamily bool = false;
  var issetQualifier bool = false;
  var issetTdelete bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRow = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetFamily = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetQualifier = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetTdelete = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetFamily{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Family is not set"));
  }
  if !issetQualifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Qualifier is not set"));
  }
  if !issetTdelete{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tdelete is not set"));
  }
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Qualifier = v
}
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs)  ReadField6(iprot thrift.TProtocol) error {
  p.Tdelete = &TDelete{
  DeleteType:   1,
}
  if err := p.Tdelete.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tdelete), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAndDelete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCheckAndDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndDeleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndDeleteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:family: ", p), err) }
  if err := oprot.WriteBinary(p.Family); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:family: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndDeleteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:qualifier: ", p), err) }
  if err := oprot.WriteBinary(p.Qualifier); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qualifier (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:qualifier: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndDeleteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:value: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndDeleteArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tdelete", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tdelete: ", p), err) }
  if err := p.Tdelete.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tdelete), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tdelete: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndDeleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCheckAndDeleteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceCheckAndDeleteResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceCheckAndDeleteResult() *THBaseServiceCheckAndDeleteResult {
  return &THBaseServiceCheckAndDeleteResult{}
}

var THBaseServiceCheckAndDeleteResult_Success_DEFAULT bool
func (p *THBaseServiceCheckAndDeleteResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return THBaseServiceCheckAndDeleteResult_Success_DEFAULT
  }
return *p.Success
}
var THBaseServiceCheckAndDeleteResult_Io_DEFAULT *TIOError
func (p *THBaseServiceCheckAndDeleteResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceCheckAndDeleteResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceCheckAndDeleteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceCheckAndDeleteResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceCheckAndDeleteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndDeleteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *THBaseServiceCheckAndDeleteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndDeleteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAndDelete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCheckAndDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCheckAndDeleteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCheckAndDeleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCheckAndDeleteResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to increment the value on
//  - Tincrement: the TIncrement to increment
type THBaseServiceIncrementArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tincrement *TIncrement `thrift:"tincrement,2,required" db:"tincrement" json:"tincrement"`
}

func NewTHBaseServiceIncrementArgs() *THBaseServiceIncrementArgs {
  return &THBaseServiceIncrementArgs{}
}


func (p *THBaseServiceIncrementArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceIncrementArgs_Tincrement_DEFAULT *TIncrement
func (p *THBaseServiceIncrementArgs) GetTincrement() *TIncrement {
  if !p.IsSetTincrement() {
    return THBaseServiceIncrementArgs_Tincrement_DEFAULT
  }
return p.Tincrement
}
func (p *THBaseServiceIncrementArgs) IsSetTincrement() bool {
  return p.Tincrement != nil
}

func (p *THBaseServiceIncrementArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTincrement bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTincrement = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTincrement{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tincrement is not set"));
  }
  return nil
}

func (p *THBaseServiceIncrementArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceIncrementArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tincrement = &TIncrement{}
  if err := p.Tincrement.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tincrement), err)
  }
  return nil
}

func (p *THBaseServiceIncrementArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("increment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceIncrementArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceIncrementArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tincrement", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tincrement: ", p), err) }
  if err := p.Tincrement.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tincrement), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tincrement: ", p), err) }
  return err
}

func (p *THBaseServiceIncrementArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceIncrementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceIncrementResult struct {
  Success *TResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceIncrementResult() *THBaseServiceIncrementResult {
  return &THBaseServiceIncrementResult{}
}

var THBaseServiceIncrementResult_Success_DEFAULT *TResult_
func (p *THBaseServiceIncrementResult) GetSuccess() *TResult_ {
  if !p.IsSetSuccess() {
    return THBaseServiceIncrementResult_Success_DEFAULT
  }
return p.Success
}
var THBaseServiceIncrementResult_Io_DEFAULT *TIOError
func (p *THBaseServiceIncrementResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceIncrementResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceIncrementResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceIncrementResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceIncrementResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceIncrementResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *THBaseServiceIncrementResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceIncrementResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("increment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceIncrementResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceIncrementResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceIncrementResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceIncrementResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to append the value on
//  - Tappend: the TAppend to append
type THBaseServiceAppendArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tappend *TAppend `thrift:"tappend,2,required" db:"tappend" json:"tappend"`
}

func NewTHBaseServiceAppendArgs() *THBaseServiceAppendArgs {
  return &THBaseServiceAppendArgs{}
}


func (p *THBaseServiceAppendArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceAppendArgs_Tappend_DEFAULT *TAppend
func (p *THBaseServiceAppendArgs) GetTappend() *TAppend {
  if !p.IsSetTappend() {
    return THBaseServiceAppendArgs_Tappend_DEFAULT
  }
return p.Tappend
}
func (p *THBaseServiceAppendArgs) IsSetTappend() bool {
  return p.Tappend != nil
}

func (p *THBaseServiceAppendArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTappend bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTappend = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTappend{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tappend is not set"));
  }
  return nil
}

func (p *THBaseServiceAppendArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceAppendArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tappend = &TAppend{}
  if err := p.Tappend.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tappend), err)
  }
  return nil
}

func (p *THBaseServiceAppendArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("append_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceAppendArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceAppendArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tappend", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tappend: ", p), err) }
  if err := p.Tappend.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tappend), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tappend: ", p), err) }
  return err
}

func (p *THBaseServiceAppendArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceAppendArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceAppendResult struct {
  Success *TResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceAppendResult() *THBaseServiceAppendResult {
  return &THBaseServiceAppendResult{}
}

var THBaseServiceAppendResult_Success_DEFAULT *TResult_
func (p *THBaseServiceAppendResult) GetSuccess() *TResult_ {
  if !p.IsSetSuccess() {
    return THBaseServiceAppendResult_Success_DEFAULT
  }
return p.Success
}
var THBaseServiceAppendResult_Io_DEFAULT *TIOError
func (p *THBaseServiceAppendResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceAppendResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceAppendResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceAppendResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceAppendResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceAppendResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *THBaseServiceAppendResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceAppendResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("append_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceAppendResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceAppendResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceAppendResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceAppendResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to get the Scanner for
//  - Tscan: the scan object to get a Scanner for
type THBaseServiceOpenScannerArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tscan *TScan `thrift:"tscan,2,required" db:"tscan" json:"tscan"`
}

func NewTHBaseServiceOpenScannerArgs() *THBaseServiceOpenScannerArgs {
  return &THBaseServiceOpenScannerArgs{}
}


func (p *THBaseServiceOpenScannerArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceOpenScannerArgs_Tscan_DEFAULT *TScan
func (p *THBaseServiceOpenScannerArgs) GetTscan() *TScan {
  if !p.IsSetTscan() {
    return THBaseServiceOpenScannerArgs_Tscan_DEFAULT
  }
return p.Tscan
}
func (p *THBaseServiceOpenScannerArgs) IsSetTscan() bool {
  return p.Tscan != nil
}

func (p *THBaseServiceOpenScannerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTscan bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTscan = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTscan{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tscan is not set"));
  }
  return nil
}

func (p *THBaseServiceOpenScannerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceOpenScannerArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tscan = &TScan{
  MaxVersions: 1,
}
  if err := p.Tscan.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tscan), err)
  }
  return nil
}

func (p *THBaseServiceOpenScannerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("openScanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceOpenScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceOpenScannerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tscan", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tscan: ", p), err) }
  if err := p.Tscan.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tscan), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tscan: ", p), err) }
  return err
}

func (p *THBaseServiceOpenScannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceOpenScannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceOpenScannerResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceOpenScannerResult() *THBaseServiceOpenScannerResult {
  return &THBaseServiceOpenScannerResult{}
}

var THBaseServiceOpenScannerResult_Success_DEFAULT int32
func (p *THBaseServiceOpenScannerResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return THBaseServiceOpenScannerResult_Success_DEFAULT
  }
return *p.Success
}
var THBaseServiceOpenScannerResult_Io_DEFAULT *TIOError
func (p *THBaseServiceOpenScannerResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceOpenScannerResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceOpenScannerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceOpenScannerResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceOpenScannerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceOpenScannerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *THBaseServiceOpenScannerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceOpenScannerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("openScanner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceOpenScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceOpenScannerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceOpenScannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceOpenScannerResult(%+v)", *p)
}

// Attributes:
//  - ScannerId: the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
//  - NumRows: number of rows to return
type THBaseServiceGetScannerRowsArgs struct {
  ScannerId int32 `thrift:"scannerId,1,required" db:"scannerId" json:"scannerId"`
  NumRows int32 `thrift:"numRows,2" db:"numRows" json:"numRows"`
}

func NewTHBaseServiceGetScannerRowsArgs() *THBaseServiceGetScannerRowsArgs {
  return &THBaseServiceGetScannerRowsArgs{
NumRows: 1,
}
}


func (p *THBaseServiceGetScannerRowsArgs) GetScannerId() int32 {
  return p.ScannerId
}

func (p *THBaseServiceGetScannerRowsArgs) GetNumRows() int32 {
  return p.NumRows
}
func (p *THBaseServiceGetScannerRowsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetScannerId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetScannerId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetScannerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ScannerId is not set"));
  }
  return nil
}

func (p *THBaseServiceGetScannerRowsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScannerId = v
}
  return nil
}

func (p *THBaseServiceGetScannerRowsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumRows = v
}
  return nil
}

func (p *THBaseServiceGetScannerRowsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getScannerRows_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetScannerRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scannerId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scannerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ScannerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scannerId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scannerId: ", p), err) }
  return err
}

func (p *THBaseServiceGetScannerRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numRows", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numRows: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numRows (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numRows: ", p), err) }
  return err
}

func (p *THBaseServiceGetScannerRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetScannerRowsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
//  - Ia: if the scannerId is invalid
type THBaseServiceGetScannerRowsResult struct {
  Success []*TResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
  Ia *TIllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewTHBaseServiceGetScannerRowsResult() *THBaseServiceGetScannerRowsResult {
  return &THBaseServiceGetScannerRowsResult{}
}

var THBaseServiceGetScannerRowsResult_Success_DEFAULT []*TResult_

func (p *THBaseServiceGetScannerRowsResult) GetSuccess() []*TResult_ {
  return p.Success
}
var THBaseServiceGetScannerRowsResult_Io_DEFAULT *TIOError
func (p *THBaseServiceGetScannerRowsResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceGetScannerRowsResult_Io_DEFAULT
  }
return p.Io
}
var THBaseServiceGetScannerRowsResult_Ia_DEFAULT *TIllegalArgument
func (p *THBaseServiceGetScannerRowsResult) GetIa() *TIllegalArgument {
  if !p.IsSetIa() {
    return THBaseServiceGetScannerRowsResult_Ia_DEFAULT
  }
return p.Ia
}
func (p *THBaseServiceGetScannerRowsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceGetScannerRowsResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceGetScannerRowsResult) IsSetIa() bool {
  return p.Ia != nil
}

func (p *THBaseServiceGetScannerRowsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceGetScannerRowsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem72 := &TResult_{}
    if err := _elem72.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem72), err)
    }
    p.Success = append(p.Success, _elem72)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceGetScannerRowsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceGetScannerRowsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ia = &TIllegalArgument{}
  if err := p.Ia.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
  }
  return nil
}

func (p *THBaseServiceGetScannerRowsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getScannerRows_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetScannerRowsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetScannerRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetScannerRowsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIa() {
    if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err) }
    if err := p.Ia.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetScannerRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetScannerRowsResult(%+v)", *p)
}

// Attributes:
//  - ScannerId: the Id of the Scanner to close *
type THBaseServiceCloseScannerArgs struct {
  ScannerId int32 `thrift:"scannerId,1,required" db:"scannerId" json:"scannerId"`
}

func NewTHBaseServiceCloseScannerArgs() *THBaseServiceCloseScannerArgs {
  return &THBaseServiceCloseScannerArgs{}
}


func (p *THBaseServiceCloseScannerArgs) GetScannerId() int32 {
  return p.ScannerId
}
func (p *THBaseServiceCloseScannerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetScannerId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetScannerId = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetScannerId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ScannerId is not set"));
  }
  return nil
}

func (p *THBaseServiceCloseScannerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ScannerId = v
}
  return nil
}

func (p *THBaseServiceCloseScannerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("closeScanner_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCloseScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scannerId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scannerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ScannerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scannerId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scannerId: ", p), err) }
  return err
}

func (p *THBaseServiceCloseScannerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCloseScannerArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia: if the scannerId is invalid
type THBaseServiceCloseScannerResult struct {
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
  Ia *TIllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewTHBaseServiceCloseScannerResult() *THBaseServiceCloseScannerResult {
  return &THBaseServiceCloseScannerResult{}
}

var THBaseServiceCloseScannerResult_Io_DEFAULT *TIOError
func (p *THBaseServiceCloseScannerResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceCloseScannerResult_Io_DEFAULT
  }
return p.Io
}
var THBaseServiceCloseScannerResult_Ia_DEFAULT *TIllegalArgument
func (p *THBaseServiceCloseScannerResult) GetIa() *TIllegalArgument {
  if !p.IsSetIa() {
    return THBaseServiceCloseScannerResult_Ia_DEFAULT
  }
return p.Ia
}
func (p *THBaseServiceCloseScannerResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceCloseScannerResult) IsSetIa() bool {
  return p.Ia != nil
}

func (p *THBaseServiceCloseScannerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceCloseScannerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceCloseScannerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.Ia = &TIllegalArgument{}
  if err := p.Ia.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
  }
  return nil
}

func (p *THBaseServiceCloseScannerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("closeScanner_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCloseScannerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCloseScannerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIa() {
    if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err) }
    if err := p.Ia.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCloseScannerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCloseScannerResult(%+v)", *p)
}

// Attributes:
//  - Table: table to apply the mutations
//  - TrowMutations: mutations to apply
type THBaseServiceMutateRowArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  TrowMutations *TRowMutations `thrift:"trowMutations,2,required" db:"trowMutations" json:"trowMutations"`
}

func NewTHBaseServiceMutateRowArgs() *THBaseServiceMutateRowArgs {
  return &THBaseServiceMutateRowArgs{}
}


func (p *THBaseServiceMutateRowArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceMutateRowArgs_TrowMutations_DEFAULT *TRowMutations
func (p *THBaseServiceMutateRowArgs) GetTrowMutations() *TRowMutations {
  if !p.IsSetTrowMutations() {
    return THBaseServiceMutateRowArgs_TrowMutations_DEFAULT
  }
return p.TrowMutations
}
func (p *THBaseServiceMutateRowArgs) IsSetTrowMutations() bool {
  return p.TrowMutations != nil
}

func (p *THBaseServiceMutateRowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTrowMutations bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTrowMutations = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTrowMutations{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TrowMutations is not set"));
  }
  return nil
}

func (p *THBaseServiceMutateRowArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceMutateRowArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.TrowMutations = &TRowMutations{}
  if err := p.TrowMutations.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TrowMutations), err)
  }
  return nil
}

func (p *THBaseServiceMutateRowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("mutateRow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceMutateRowArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceMutateRowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trowMutations", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trowMutations: ", p), err) }
  if err := p.TrowMutations.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TrowMutations), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trowMutations: ", p), err) }
  return err
}

func (p *THBaseServiceMutateRowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceMutateRowArgs(%+v)", *p)
}

// Attributes:
//  - Io
type THBaseServiceMutateRowResult struct {
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceMutateRowResult() *THBaseServiceMutateRowResult {
  return &THBaseServiceMutateRowResult{}
}

var THBaseServiceMutateRowResult_Io_DEFAULT *TIOError
func (p *THBaseServiceMutateRowResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceMutateRowResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceMutateRowResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceMutateRowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceMutateRowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceMutateRowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("mutateRow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceMutateRowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceMutateRowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceMutateRowResult(%+v)", *p)
}

// Attributes:
//  - Table: the table to get the Scanner for
//  - Tscan: the scan object to get a Scanner for
//  - NumRows: number of rows to return
type THBaseServiceGetScannerResultsArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Tscan *TScan `thrift:"tscan,2,required" db:"tscan" json:"tscan"`
  NumRows int32 `thrift:"numRows,3" db:"numRows" json:"numRows"`
}

func NewTHBaseServiceGetScannerResultsArgs() *THBaseServiceGetScannerResultsArgs {
  return &THBaseServiceGetScannerResultsArgs{
NumRows: 1,
}
}


func (p *THBaseServiceGetScannerResultsArgs) GetTable() []byte {
  return p.Table
}
var THBaseServiceGetScannerResultsArgs_Tscan_DEFAULT *TScan
func (p *THBaseServiceGetScannerResultsArgs) GetTscan() *TScan {
  if !p.IsSetTscan() {
    return THBaseServiceGetScannerResultsArgs_Tscan_DEFAULT
  }
return p.Tscan
}

func (p *THBaseServiceGetScannerResultsArgs) GetNumRows() int32 {
  return p.NumRows
}
func (p *THBaseServiceGetScannerResultsArgs) IsSetTscan() bool {
  return p.Tscan != nil
}

func (p *THBaseServiceGetScannerResultsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetTscan bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTscan = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetTscan{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tscan is not set"));
  }
  return nil
}

func (p *THBaseServiceGetScannerResultsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceGetScannerResultsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Tscan = &TScan{
  MaxVersions: 1,
}
  if err := p.Tscan.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tscan), err)
  }
  return nil
}

func (p *THBaseServiceGetScannerResultsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumRows = v
}
  return nil
}

func (p *THBaseServiceGetScannerResultsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getScannerResults_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetScannerResultsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceGetScannerResultsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tscan", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tscan: ", p), err) }
  if err := p.Tscan.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tscan), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tscan: ", p), err) }
  return err
}

func (p *THBaseServiceGetScannerResultsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numRows", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numRows: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numRows (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numRows: ", p), err) }
  return err
}

func (p *THBaseServiceGetScannerResultsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetScannerResultsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceGetScannerResultsResult struct {
  Success []*TResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceGetScannerResultsResult() *THBaseServiceGetScannerResultsResult {
  return &THBaseServiceGetScannerResultsResult{}
}

var THBaseServiceGetScannerResultsResult_Success_DEFAULT []*TResult_

func (p *THBaseServiceGetScannerResultsResult) GetSuccess() []*TResult_ {
  return p.Success
}
var THBaseServiceGetScannerResultsResult_Io_DEFAULT *TIOError
func (p *THBaseServiceGetScannerResultsResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceGetScannerResultsResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceGetScannerResultsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceGetScannerResultsResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceGetScannerResultsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceGetScannerResultsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TResult_, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem73 := &TResult_{}
    if err := _elem73.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem73), err)
    }
    p.Success = append(p.Success, _elem73)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceGetScannerResultsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceGetScannerResultsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getScannerResults_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetScannerResultsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetScannerResultsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetScannerResultsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetScannerResultsResult(%+v)", *p)
}

// Attributes:
//  - Table
//  - Row
//  - Reload
type THBaseServiceGetRegionLocationArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Row []byte `thrift:"row,2,required" db:"row" json:"row"`
  Reload bool `thrift:"reload,3" db:"reload" json:"reload"`
}

func NewTHBaseServiceGetRegionLocationArgs() *THBaseServiceGetRegionLocationArgs {
  return &THBaseServiceGetRegionLocationArgs{}
}


func (p *THBaseServiceGetRegionLocationArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceGetRegionLocationArgs) GetRow() []byte {
  return p.Row
}

func (p *THBaseServiceGetRegionLocationArgs) GetReload() bool {
  return p.Reload
}
func (p *THBaseServiceGetRegionLocationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetRow bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRow = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  return nil
}

func (p *THBaseServiceGetRegionLocationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceGetRegionLocationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *THBaseServiceGetRegionLocationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reload = v
}
  return nil
}

func (p *THBaseServiceGetRegionLocationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRegionLocation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetRegionLocationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceGetRegionLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err) }
  return err
}

func (p *THBaseServiceGetRegionLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reload", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reload: ", p), err) }
  if err := oprot.WriteBool(bool(p.Reload)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reload (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reload: ", p), err) }
  return err
}

func (p *THBaseServiceGetRegionLocationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetRegionLocationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceGetRegionLocationResult struct {
  Success *THRegionLocation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceGetRegionLocationResult() *THBaseServiceGetRegionLocationResult {
  return &THBaseServiceGetRegionLocationResult{}
}

var THBaseServiceGetRegionLocationResult_Success_DEFAULT *THRegionLocation
func (p *THBaseServiceGetRegionLocationResult) GetSuccess() *THRegionLocation {
  if !p.IsSetSuccess() {
    return THBaseServiceGetRegionLocationResult_Success_DEFAULT
  }
return p.Success
}
var THBaseServiceGetRegionLocationResult_Io_DEFAULT *TIOError
func (p *THBaseServiceGetRegionLocationResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceGetRegionLocationResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceGetRegionLocationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceGetRegionLocationResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceGetRegionLocationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceGetRegionLocationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &THRegionLocation{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *THBaseServiceGetRegionLocationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceGetRegionLocationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRegionLocation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetRegionLocationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetRegionLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetRegionLocationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetRegionLocationResult(%+v)", *p)
}

// Attributes:
//  - Table
type THBaseServiceGetAllRegionLocationsArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
}

func NewTHBaseServiceGetAllRegionLocationsArgs() *THBaseServiceGetAllRegionLocationsArgs {
  return &THBaseServiceGetAllRegionLocationsArgs{}
}


func (p *THBaseServiceGetAllRegionLocationsArgs) GetTable() []byte {
  return p.Table
}
func (p *THBaseServiceGetAllRegionLocationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllRegionLocations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceGetAllRegionLocationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetAllRegionLocationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceGetAllRegionLocationsResult struct {
  Success []*THRegionLocation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceGetAllRegionLocationsResult() *THBaseServiceGetAllRegionLocationsResult {
  return &THBaseServiceGetAllRegionLocationsResult{}
}

var THBaseServiceGetAllRegionLocationsResult_Success_DEFAULT []*THRegionLocation

func (p *THBaseServiceGetAllRegionLocationsResult) GetSuccess() []*THRegionLocation {
  return p.Success
}
var THBaseServiceGetAllRegionLocationsResult_Io_DEFAULT *TIOError
func (p *THBaseServiceGetAllRegionLocationsResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceGetAllRegionLocationsResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceGetAllRegionLocationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceGetAllRegionLocationsResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceGetAllRegionLocationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*THRegionLocation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem74 := &THRegionLocation{}
    if err := _elem74.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem74), err)
    }
    p.Success = append(p.Success, _elem74)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllRegionLocations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceGetAllRegionLocationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetAllRegionLocationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceGetAllRegionLocationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceGetAllRegionLocationsResult(%+v)", *p)
}

// Attributes:
//  - Table: to check in and delete from
//  - Row: row to check
//  - Family: column family to check
//  - Qualifier: column qualifier to check
//  - CompareOp: comparison to make on the value
//  - Value: the expected value to be compared against, if not provided the
// check is for the non-existence of the column in question
//  - RowMutations: row mutations to execute if the value matches
type THBaseServiceCheckAndMutateArgs struct {
  Table []byte `thrift:"table,1,required" db:"table" json:"table"`
  Row []byte `thrift:"row,2,required" db:"row" json:"row"`
  Family []byte `thrift:"family,3,required" db:"family" json:"family"`
  Qualifier []byte `thrift:"qualifier,4,required" db:"qualifier" json:"qualifier"`
  CompareOp TCompareOp `thrift:"compareOp,5,required" db:"compareOp" json:"compareOp"`
  Value []byte `thrift:"value,6" db:"value" json:"value"`
  RowMutations *TRowMutations `thrift:"rowMutations,7,required" db:"rowMutations" json:"rowMutations"`
}

func NewTHBaseServiceCheckAndMutateArgs() *THBaseServiceCheckAndMutateArgs {
  return &THBaseServiceCheckAndMutateArgs{}
}


func (p *THBaseServiceCheckAndMutateArgs) GetTable() []byte {
  return p.Table
}

func (p *THBaseServiceCheckAndMutateArgs) GetRow() []byte {
  return p.Row
}

func (p *THBaseServiceCheckAndMutateArgs) GetFamily() []byte {
  return p.Family
}

func (p *THBaseServiceCheckAndMutateArgs) GetQualifier() []byte {
  return p.Qualifier
}

func (p *THBaseServiceCheckAndMutateArgs) GetCompareOp() TCompareOp {
  return p.CompareOp
}

func (p *THBaseServiceCheckAndMutateArgs) GetValue() []byte {
  return p.Value
}
var THBaseServiceCheckAndMutateArgs_RowMutations_DEFAULT *TRowMutations
func (p *THBaseServiceCheckAndMutateArgs) GetRowMutations() *TRowMutations {
  if !p.IsSetRowMutations() {
    return THBaseServiceCheckAndMutateArgs_RowMutations_DEFAULT
  }
return p.RowMutations
}
func (p *THBaseServiceCheckAndMutateArgs) IsSetRowMutations() bool {
  return p.RowMutations != nil
}

func (p *THBaseServiceCheckAndMutateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTable bool = false;
  var issetRow bool = false;
  var issetFamily bool = false;
  var issetQualifier bool = false;
  var issetCompareOp bool = false;
  var issetRowMutations bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetTable = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetRow = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetFamily = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetQualifier = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetCompareOp = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetRowMutations = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Table is not set"));
  }
  if !issetRow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Row is not set"));
  }
  if !issetFamily{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Family is not set"));
  }
  if !issetQualifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Qualifier is not set"));
  }
  if !issetCompareOp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CompareOp is not set"));
  }
  if !issetRowMutations{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RowMutations is not set"));
  }
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Row = v
}
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Family = v
}
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Qualifier = v
}
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TCompareOp(v)
  p.CompareOp = temp
}
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs)  ReadField7(iprot thrift.TProtocol) error {
  p.RowMutations = &TRowMutations{}
  if err := p.RowMutations.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RowMutations), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAndMutate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCheckAndMutateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err) }
  if err := oprot.WriteBinary(p.Table); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err) }
  if err := oprot.WriteBinary(p.Row); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("family", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:family: ", p), err) }
  if err := oprot.WriteBinary(p.Family); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.family (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:family: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:qualifier: ", p), err) }
  if err := oprot.WriteBinary(p.Qualifier); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qualifier (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:qualifier: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compareOp", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:compareOp: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompareOp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compareOp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:compareOp: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:value: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rowMutations", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:rowMutations: ", p), err) }
  if err := p.RowMutations.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RowMutations), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:rowMutations: ", p), err) }
  return err
}

func (p *THBaseServiceCheckAndMutateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCheckAndMutateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type THBaseServiceCheckAndMutateResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  Io *TIOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewTHBaseServiceCheckAndMutateResult() *THBaseServiceCheckAndMutateResult {
  return &THBaseServiceCheckAndMutateResult{}
}

var THBaseServiceCheckAndMutateResult_Success_DEFAULT bool
func (p *THBaseServiceCheckAndMutateResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return THBaseServiceCheckAndMutateResult_Success_DEFAULT
  }
return *p.Success
}
var THBaseServiceCheckAndMutateResult_Io_DEFAULT *TIOError
func (p *THBaseServiceCheckAndMutateResult) GetIo() *TIOError {
  if !p.IsSetIo() {
    return THBaseServiceCheckAndMutateResult_Io_DEFAULT
  }
return p.Io
}
func (p *THBaseServiceCheckAndMutateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *THBaseServiceCheckAndMutateResult) IsSetIo() bool {
  return p.Io != nil
}

func (p *THBaseServiceCheckAndMutateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndMutateResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *THBaseServiceCheckAndMutateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Io = &TIOError{}
  if err := p.Io.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
  }
  return nil
}

func (p *THBaseServiceCheckAndMutateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAndMutate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *THBaseServiceCheckAndMutateResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCheckAndMutateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIo() {
    if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err) }
    if err := p.Io.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err) }
  }
  return err
}

func (p *THBaseServiceCheckAndMutateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("THBaseServiceCheckAndMutateResult(%+v)", *p)
}


